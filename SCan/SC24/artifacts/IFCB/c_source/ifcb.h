/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Mon Sep  2 11:07:53 2024.
 */

#ifndef IFCB_H
#define IFCB_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define IFCB_D_SPACE_RL_SETPOINTS1_FRAME_ID (0x184u)
#define IFCB_D_SPACE_FL_SETPOINTS1_FRAME_ID (0x185u)
#define IFCB_D_SPACE_RR_SETPOINTS1_FRAME_ID (0x188u)
#define IFCB_D_SPACE_FR_SETPOINTS1_FRAME_ID (0x189u)
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_FRAME_ID (0x283u)
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_FRAME_ID (0x284u)
#define IFCB_INVERTER_RL_ACTUAL_VALUES2_FRAME_ID (0x285u)
#define IFCB_INVERTER_FL_ACTUAL_VALUES2_FRAME_ID (0x286u)
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_FRAME_ID (0x287u)
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_FRAME_ID (0x288u)
#define IFCB_INVERTER_RR_ACTUAL_VALUES2_FRAME_ID (0x289u)
#define IFCB_INVERTER_FR_ACTUAL_VALUES2_FRAME_ID (0x28au)

/* Frame lengths in bytes. */
#define IFCB_D_SPACE_RL_SETPOINTS1_LENGTH (8u)
#define IFCB_D_SPACE_FL_SETPOINTS1_LENGTH (8u)
#define IFCB_D_SPACE_RR_SETPOINTS1_LENGTH (8u)
#define IFCB_D_SPACE_FR_SETPOINTS1_LENGTH (8u)
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_LENGTH (8u)
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_LENGTH (8u)
#define IFCB_INVERTER_RL_ACTUAL_VALUES2_LENGTH (8u)
#define IFCB_INVERTER_FL_ACTUAL_VALUES2_LENGTH (8u)
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_LENGTH (8u)
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_LENGTH (8u)
#define IFCB_INVERTER_RR_ACTUAL_VALUES2_LENGTH (8u)
#define IFCB_INVERTER_FR_ACTUAL_VALUES2_LENGTH (8u)

/* Extended or standard frame types. */
#define IFCB_D_SPACE_RL_SETPOINTS1_IS_EXTENDED (0)
#define IFCB_D_SPACE_FL_SETPOINTS1_IS_EXTENDED (0)
#define IFCB_D_SPACE_RR_SETPOINTS1_IS_EXTENDED (0)
#define IFCB_D_SPACE_FR_SETPOINTS1_IS_EXTENDED (0)
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_IS_EXTENDED (0)
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_IS_EXTENDED (0)
#define IFCB_INVERTER_RL_ACTUAL_VALUES2_IS_EXTENDED (0)
#define IFCB_INVERTER_FL_ACTUAL_VALUES2_IS_EXTENDED (0)
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_IS_EXTENDED (0)
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_IS_EXTENDED (0)
#define IFCB_INVERTER_RR_ACTUAL_VALUES2_IS_EXTENDED (0)
#define IFCB_INVERTER_FR_ACTUAL_VALUES2_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define IFCB_D_SPACE_RL_SETPOINTS1_NAME "dSpace_RL_Setpoints1"
#define IFCB_D_SPACE_FL_SETPOINTS1_NAME "dSpace_FL_Setpoints1"
#define IFCB_D_SPACE_RR_SETPOINTS1_NAME "dSpace_RR_Setpoints1"
#define IFCB_D_SPACE_FR_SETPOINTS1_NAME "dSpace_FR_Setpoints1"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_NAME "Inverter_RL_ActualValues1"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_NAME "Inverter_FL_ActualValues1"
#define IFCB_INVERTER_RL_ACTUAL_VALUES2_NAME "Inverter_RL_ActualValues2"
#define IFCB_INVERTER_FL_ACTUAL_VALUES2_NAME "Inverter_FL_ActualValues2"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_NAME "Inverter_RR_ActualValues1"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_NAME "Inverter_FR_ActualValues1"
#define IFCB_INVERTER_RR_ACTUAL_VALUES2_NAME "Inverter_RR_ActualValues2"
#define IFCB_INVERTER_FR_ACTUAL_VALUES2_NAME "Inverter_FR_ActualValues2"

/* Signal Names. */
#define IFCB_D_SPACE_RL_SETPOINTS1_AMK_INVERTER_ON_NAME "AMK_InverterOn"
#define IFCB_D_SPACE_RL_SETPOINTS1_AMK_DC_ON_NAME "AMK_DcOn"
#define IFCB_D_SPACE_RL_SETPOINTS1_AMK_ENABLE_NAME "AMK_Enable"
#define IFCB_D_SPACE_RL_SETPOINTS1_AMK_ERROR_RESET_NAME "AMK_ErrorReset"
#define IFCB_D_SPACE_RL_SETPOINTS1_AMK_TARGET_VELOCITY_NAME "AMK_TargetVelocity"
#define IFCB_D_SPACE_RL_SETPOINTS1_AMK_TORQUE_LIMIT_POSITIV_NAME "AMK_TorqueLimitPositiv"
#define IFCB_D_SPACE_RL_SETPOINTS1_AMK_TORQUE_LIMIT_NEGATIV_NAME "AMK_TorqueLimitNegativ"
#define IFCB_D_SPACE_FL_SETPOINTS1_AMK_INVERTER_ON_NAME "AMK_InverterOn"
#define IFCB_D_SPACE_FL_SETPOINTS1_AMK_DC_ON_NAME "AMK_DcOn"
#define IFCB_D_SPACE_FL_SETPOINTS1_AMK_ENABLE_NAME "AMK_Enable"
#define IFCB_D_SPACE_FL_SETPOINTS1_AMK_ERROR_RESET_NAME "AMK_ErrorReset"
#define IFCB_D_SPACE_FL_SETPOINTS1_AMK_TARGET_VELOCITY_NAME "AMK_TargetVelocity"
#define IFCB_D_SPACE_FL_SETPOINTS1_AMK_TORQUE_LIMIT_POSITIV_NAME "AMK_TorqueLimitPositiv"
#define IFCB_D_SPACE_FL_SETPOINTS1_AMK_TORQUE_LIMIT_NEGATIV_NAME "AMK_TorqueLimitNegativ"
#define IFCB_D_SPACE_RR_SETPOINTS1_AMK_INVERTER_ON_NAME "AMK_InverterOn"
#define IFCB_D_SPACE_RR_SETPOINTS1_AMK_DC_ON_NAME "AMK_DcOn"
#define IFCB_D_SPACE_RR_SETPOINTS1_AMK_ENABLE_NAME "AMK_Enable"
#define IFCB_D_SPACE_RR_SETPOINTS1_AMK_ERROR_RESET_NAME "AMK_ErrorReset"
#define IFCB_D_SPACE_RR_SETPOINTS1_AMK_TARGET_VELOCITY_NAME "AMK_TargetVelocity"
#define IFCB_D_SPACE_RR_SETPOINTS1_AMK_TORQUE_LIMIT_POSITIV_NAME "AMK_TorqueLimitPositiv"
#define IFCB_D_SPACE_RR_SETPOINTS1_AMK_TORQUE_LIMIT_NEGATIV_NAME "AMK_TorqueLimitNegativ"
#define IFCB_D_SPACE_FR_SETPOINTS1_AMK_INVERTER_ON_NAME "AMK_InverterOn"
#define IFCB_D_SPACE_FR_SETPOINTS1_AMK_DC_ON_NAME "AMK_DcOn"
#define IFCB_D_SPACE_FR_SETPOINTS1_AMK_ENABLE_NAME "AMK_Enable"
#define IFCB_D_SPACE_FR_SETPOINTS1_AMK_ERROR_RESET_NAME "AMK_ErrorReset"
#define IFCB_D_SPACE_FR_SETPOINTS1_AMK_TARGET_VELOCITY_NAME "AMK_TargetVelocity"
#define IFCB_D_SPACE_FR_SETPOINTS1_AMK_TORQUE_LIMIT_POSITIV_NAME "AMK_TorqueLimitPositiv"
#define IFCB_D_SPACE_FR_SETPOINTS1_AMK_TORQUE_LIMIT_NEGATIV_NAME "AMK_TorqueLimitNegativ"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_SYSTEM_READY_NAME "AMK_SystemReady"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_ERROR_NAME "AMK_Error"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_WARNING_NAME "AMK_Warning"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_QUIT_DC_ON_NAME "AMK_QuitDcOn"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_DC_ON_NAME "AMK_DcOn"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_QUIT_INVERTER_ON_NAME "AMK_QuitInverterOn"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_INVERTER_ON_NAME "AMK_InverterOn"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_DERATING_NAME "AMK_Derating"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_ACTUAL_VELOCITY_NAME "AMK_ActualVelocity"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_TORQUE_CURRENT_NAME "AMK_TorqueCurrent"
#define IFCB_INVERTER_RL_ACTUAL_VALUES1_AMK_MAGNETIZING_CURRENT_NAME "AMK_MagnetizingCurrent"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_SYSTEM_READY_NAME "AMK_SystemReady"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_ERROR_NAME "AMK_Error"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_WARNING_NAME "AMK_Warning"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_QUIT_DC_ON_NAME "AMK_QuitDcOn"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_DC_ON_NAME "AMK_DcOn"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_QUIT_INVERTER_ON_NAME "AMK_QuitInverterOn"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_INVERTER_ON_NAME "AMK_InverterOn"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_DERATING_NAME "AMK_Derating"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_ACTUAL_VELOCITY_NAME "AMK_ActualVelocity"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_TORQUE_CURRENT_NAME "AMK_TorqueCurrent"
#define IFCB_INVERTER_FL_ACTUAL_VALUES1_AMK_MAGNETIZING_CURRENT_NAME "AMK_MagnetizingCurrent"
#define IFCB_INVERTER_RL_ACTUAL_VALUES2_AMK_TEMP_MOTOR_NAME "AMK_TempMotor"
#define IFCB_INVERTER_RL_ACTUAL_VALUES2_AMK_TEMP_INVERTER_NAME "AMK_TempInverter"
#define IFCB_INVERTER_RL_ACTUAL_VALUES2_AMK_ERROR_INFO_NAME "AMK_ErrorInfo"
#define IFCB_INVERTER_RL_ACTUAL_VALUES2_AMK_IGBT_TEMP_NAME "AMK_IGBT_Temp"
#define IFCB_INVERTER_FL_ACTUAL_VALUES2_AMK_TEMP_MOTOR_NAME "AMK_TempMotor"
#define IFCB_INVERTER_FL_ACTUAL_VALUES2_AMK_TEMP_INVERTER_NAME "AMK_TempInverter"
#define IFCB_INVERTER_FL_ACTUAL_VALUES2_AMK_ERROR_INFO_NAME "AMK_ErrorInfo"
#define IFCB_INVERTER_FL_ACTUAL_VALUES2_AMK_IGBT_TEMP_NAME "AMK_IGBT_Temp"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_SYSTEM_READY_NAME "AMK_SystemReady"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_ERROR_NAME "AMK_Error"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_WARNING_NAME "AMK_Warning"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_QUIT_DC_ON_NAME "AMK_QuitDcOn"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_DC_ON_NAME "AMK_DcOn"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_QUIT_INVERTER_ON_NAME "AMK_QuitInverterOn"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_INVERTER_ON_NAME "AMK_InverterOn"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_DERATING_NAME "AMK_Derating"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_ACTUAL_VELOCITY_NAME "AMK_ActualVelocity"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_TORQUE_CURRENT_NAME "AMK_TorqueCurrent"
#define IFCB_INVERTER_RR_ACTUAL_VALUES1_AMK_MAGNETIZING_CURRENT_NAME "AMK_MagnetizingCurrent"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_SYSTEM_READY_NAME "AMK_SystemReady"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_ERROR_NAME "AMK_Error"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_WARNING_NAME "AMK_Warning"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_QUIT_DC_ON_NAME "AMK_QuitDcOn"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_DC_ON_NAME "AMK_DcOn"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_QUIT_INVERTER_ON_NAME "AMK_QuitInverterOn"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_INVERTER_ON_NAME "AMK_InverterOn"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_DERATING_NAME "AMK_Derating"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_ACTUAL_VELOCITY_NAME "AMK_ActualVelocity"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_TORQUE_CURRENT_NAME "AMK_TorqueCurrent"
#define IFCB_INVERTER_FR_ACTUAL_VALUES1_AMK_MAGNETIZING_CURRENT_NAME "AMK_MagnetizingCurrent"
#define IFCB_INVERTER_RR_ACTUAL_VALUES2_AMK_TEMP_MOTOR_NAME "AMK_TempMotor"
#define IFCB_INVERTER_RR_ACTUAL_VALUES2_AMK_TEMP_INVERTER_NAME "AMK_TempInverter"
#define IFCB_INVERTER_RR_ACTUAL_VALUES2_AMK_ERROR_INFO_NAME "AMK_ErrorInfo"
#define IFCB_INVERTER_RR_ACTUAL_VALUES2_AMK_IGBT_TEMP_NAME "AMK_IGBT_Temp"
#define IFCB_INVERTER_FR_ACTUAL_VALUES2_AMK_TEMP_MOTOR_NAME "AMK_TempMotor"
#define IFCB_INVERTER_FR_ACTUAL_VALUES2_AMK_TEMP_INVERTER_NAME "AMK_TempInverter"
#define IFCB_INVERTER_FR_ACTUAL_VALUES2_AMK_ERROR_INFO_NAME "AMK_ErrorInfo"
#define IFCB_INVERTER_FR_ACTUAL_VALUES2_AMK_IGBT_TEMP_NAME "AMK_IGBT_Temp"

/**
 * Signals in message dSpace_RL_Setpoints1.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_d_space_rl_setpoints1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_error_reset;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_target_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_limit_positiv;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_limit_negativ;
};

/**
 * Signals in message dSpace_FL_Setpoints1.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_d_space_fl_setpoints1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_error_reset;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_target_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_limit_positiv;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_limit_negativ;
};

/**
 * Signals in message dSpace_RR_Setpoints1.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_d_space_rr_setpoints1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_error_reset;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_target_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_limit_positiv;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_limit_negativ;
};

/**
 * Signals in message dSpace_FR_Setpoints1.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_d_space_fr_setpoints1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_error_reset;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_target_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_limit_positiv;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_limit_negativ;
};

/**
 * Signals in message Inverter_RL_ActualValues1.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_inverter_rl_actual_values1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_derating;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_actual_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_current;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_magnetizing_current;
};

/**
 * Signals in message Inverter_FL_ActualValues1.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_inverter_fl_actual_values1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_derating;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_actual_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_current;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_magnetizing_current;
};

/**
 * Signals in message Inverter_RL_ActualValues2.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_inverter_rl_actual_values2_t {
    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_temp_motor;

    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_temp_inverter;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk_error_info;

    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_igbt_temp;
};

/**
 * Signals in message Inverter_FL_ActualValues2.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_inverter_fl_actual_values2_t {
    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_temp_motor;

    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_temp_inverter;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk_error_info;

    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_igbt_temp;
};

/**
 * Signals in message Inverter_RR_ActualValues1.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_inverter_rr_actual_values1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_derating;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_actual_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_current;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_magnetizing_current;
};

/**
 * Signals in message Inverter_FR_ActualValues1.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_inverter_fr_actual_values1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t amk_derating;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_actual_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_torque_current;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t amk_magnetizing_current;
};

/**
 * Signals in message Inverter_RR_ActualValues2.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_inverter_rr_actual_values2_t {
    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_temp_motor;

    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_temp_inverter;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk_error_info;

    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_igbt_temp;
};

/**
 * Signals in message Inverter_FR_ActualValues2.
 *
 * All signal values are as on the CAN bus.
 */
struct ifcb_inverter_fr_actual_values2_t {
    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_temp_motor;

    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_temp_inverter;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk_error_info;

    /**
     * Range: -32760..32760 (-3276..3276 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk_igbt_temp;
};

/**
 * Pack message dSpace_RL_Setpoints1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_d_space_rl_setpoints1_pack(
    uint8_t *dst_p,
    const struct ifcb_d_space_rl_setpoints1_t *src_p,
    size_t size);

/**
 * Unpack message dSpace_RL_Setpoints1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_d_space_rl_setpoints1_unpack(
    struct ifcb_d_space_rl_setpoints1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from dSpace_RL_Setpoints1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_d_space_rl_setpoints1_init(struct ifcb_d_space_rl_setpoints1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_rl_setpoints1_amk_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rl_setpoints1_amk_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rl_setpoints1_amk_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_rl_setpoints1_amk_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rl_setpoints1_amk_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rl_setpoints1_amk_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_rl_setpoints1_amk_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rl_setpoints1_amk_enable_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rl_setpoints1_amk_enable_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_rl_setpoints1_amk_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rl_setpoints1_amk_error_reset_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rl_setpoints1_amk_error_reset_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_rl_setpoints1_amk_target_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rl_setpoints1_amk_target_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rl_setpoints1_amk_target_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_rl_setpoints1_amk_torque_limit_positiv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rl_setpoints1_amk_torque_limit_positiv_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rl_setpoints1_amk_torque_limit_positiv_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_rl_setpoints1_amk_torque_limit_negativ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rl_setpoints1_amk_torque_limit_negativ_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rl_setpoints1_amk_torque_limit_negativ_is_in_range(int16_t value);

/**
 * Pack message dSpace_FL_Setpoints1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_d_space_fl_setpoints1_pack(
    uint8_t *dst_p,
    const struct ifcb_d_space_fl_setpoints1_t *src_p,
    size_t size);

/**
 * Unpack message dSpace_FL_Setpoints1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_d_space_fl_setpoints1_unpack(
    struct ifcb_d_space_fl_setpoints1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from dSpace_FL_Setpoints1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_d_space_fl_setpoints1_init(struct ifcb_d_space_fl_setpoints1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_fl_setpoints1_amk_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fl_setpoints1_amk_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fl_setpoints1_amk_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_fl_setpoints1_amk_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fl_setpoints1_amk_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fl_setpoints1_amk_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_fl_setpoints1_amk_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fl_setpoints1_amk_enable_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fl_setpoints1_amk_enable_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_fl_setpoints1_amk_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fl_setpoints1_amk_error_reset_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fl_setpoints1_amk_error_reset_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_fl_setpoints1_amk_target_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fl_setpoints1_amk_target_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fl_setpoints1_amk_target_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_fl_setpoints1_amk_torque_limit_positiv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fl_setpoints1_amk_torque_limit_positiv_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fl_setpoints1_amk_torque_limit_positiv_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_fl_setpoints1_amk_torque_limit_negativ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fl_setpoints1_amk_torque_limit_negativ_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fl_setpoints1_amk_torque_limit_negativ_is_in_range(int16_t value);

/**
 * Pack message dSpace_RR_Setpoints1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_d_space_rr_setpoints1_pack(
    uint8_t *dst_p,
    const struct ifcb_d_space_rr_setpoints1_t *src_p,
    size_t size);

/**
 * Unpack message dSpace_RR_Setpoints1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_d_space_rr_setpoints1_unpack(
    struct ifcb_d_space_rr_setpoints1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from dSpace_RR_Setpoints1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_d_space_rr_setpoints1_init(struct ifcb_d_space_rr_setpoints1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_rr_setpoints1_amk_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rr_setpoints1_amk_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rr_setpoints1_amk_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_rr_setpoints1_amk_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rr_setpoints1_amk_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rr_setpoints1_amk_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_rr_setpoints1_amk_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rr_setpoints1_amk_enable_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rr_setpoints1_amk_enable_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_rr_setpoints1_amk_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rr_setpoints1_amk_error_reset_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rr_setpoints1_amk_error_reset_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_rr_setpoints1_amk_target_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rr_setpoints1_amk_target_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rr_setpoints1_amk_target_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_rr_setpoints1_amk_torque_limit_positiv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rr_setpoints1_amk_torque_limit_positiv_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rr_setpoints1_amk_torque_limit_positiv_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_rr_setpoints1_amk_torque_limit_negativ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_rr_setpoints1_amk_torque_limit_negativ_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_rr_setpoints1_amk_torque_limit_negativ_is_in_range(int16_t value);

/**
 * Pack message dSpace_FR_Setpoints1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_d_space_fr_setpoints1_pack(
    uint8_t *dst_p,
    const struct ifcb_d_space_fr_setpoints1_t *src_p,
    size_t size);

/**
 * Unpack message dSpace_FR_Setpoints1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_d_space_fr_setpoints1_unpack(
    struct ifcb_d_space_fr_setpoints1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from dSpace_FR_Setpoints1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_d_space_fr_setpoints1_init(struct ifcb_d_space_fr_setpoints1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_fr_setpoints1_amk_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fr_setpoints1_amk_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fr_setpoints1_amk_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_fr_setpoints1_amk_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fr_setpoints1_amk_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fr_setpoints1_amk_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_fr_setpoints1_amk_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fr_setpoints1_amk_enable_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fr_setpoints1_amk_enable_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_d_space_fr_setpoints1_amk_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fr_setpoints1_amk_error_reset_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fr_setpoints1_amk_error_reset_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_fr_setpoints1_amk_target_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fr_setpoints1_amk_target_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fr_setpoints1_amk_target_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_fr_setpoints1_amk_torque_limit_positiv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fr_setpoints1_amk_torque_limit_positiv_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fr_setpoints1_amk_torque_limit_positiv_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_d_space_fr_setpoints1_amk_torque_limit_negativ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_d_space_fr_setpoints1_amk_torque_limit_negativ_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_d_space_fr_setpoints1_amk_torque_limit_negativ_is_in_range(int16_t value);

/**
 * Pack message Inverter_RL_ActualValues1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_inverter_rl_actual_values1_pack(
    uint8_t *dst_p,
    const struct ifcb_inverter_rl_actual_values1_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_RL_ActualValues1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_inverter_rl_actual_values1_unpack(
    struct ifcb_inverter_rl_actual_values1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_RL_ActualValues1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_inverter_rl_actual_values1_init(struct ifcb_inverter_rl_actual_values1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rl_actual_values1_amk_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_system_ready_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_system_ready_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rl_actual_values1_amk_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_error_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_error_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rl_actual_values1_amk_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_warning_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_warning_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rl_actual_values1_amk_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_quit_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_quit_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rl_actual_values1_amk_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rl_actual_values1_amk_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_quit_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_quit_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rl_actual_values1_amk_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rl_actual_values1_amk_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_derating_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_derating_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rl_actual_values1_amk_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_actual_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_actual_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rl_actual_values1_amk_torque_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_torque_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_torque_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rl_actual_values1_amk_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values1_amk_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values1_amk_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message Inverter_FL_ActualValues1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_inverter_fl_actual_values1_pack(
    uint8_t *dst_p,
    const struct ifcb_inverter_fl_actual_values1_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_FL_ActualValues1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_inverter_fl_actual_values1_unpack(
    struct ifcb_inverter_fl_actual_values1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_FL_ActualValues1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_inverter_fl_actual_values1_init(struct ifcb_inverter_fl_actual_values1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fl_actual_values1_amk_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_system_ready_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_system_ready_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fl_actual_values1_amk_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_error_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_error_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fl_actual_values1_amk_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_warning_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_warning_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fl_actual_values1_amk_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_quit_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_quit_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fl_actual_values1_amk_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fl_actual_values1_amk_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_quit_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_quit_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fl_actual_values1_amk_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fl_actual_values1_amk_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_derating_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_derating_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fl_actual_values1_amk_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_actual_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_actual_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fl_actual_values1_amk_torque_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_torque_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_torque_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fl_actual_values1_amk_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values1_amk_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values1_amk_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message Inverter_RL_ActualValues2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_inverter_rl_actual_values2_pack(
    uint8_t *dst_p,
    const struct ifcb_inverter_rl_actual_values2_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_RL_ActualValues2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_inverter_rl_actual_values2_unpack(
    struct ifcb_inverter_rl_actual_values2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_RL_ActualValues2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_inverter_rl_actual_values2_init(struct ifcb_inverter_rl_actual_values2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rl_actual_values2_amk_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values2_amk_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values2_amk_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rl_actual_values2_amk_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values2_amk_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values2_amk_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ifcb_inverter_rl_actual_values2_amk_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values2_amk_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values2_amk_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rl_actual_values2_amk_igbt_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rl_actual_values2_amk_igbt_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rl_actual_values2_amk_igbt_temp_is_in_range(int16_t value);

/**
 * Pack message Inverter_FL_ActualValues2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_inverter_fl_actual_values2_pack(
    uint8_t *dst_p,
    const struct ifcb_inverter_fl_actual_values2_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_FL_ActualValues2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_inverter_fl_actual_values2_unpack(
    struct ifcb_inverter_fl_actual_values2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_FL_ActualValues2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_inverter_fl_actual_values2_init(struct ifcb_inverter_fl_actual_values2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fl_actual_values2_amk_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values2_amk_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values2_amk_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fl_actual_values2_amk_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values2_amk_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values2_amk_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ifcb_inverter_fl_actual_values2_amk_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values2_amk_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values2_amk_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fl_actual_values2_amk_igbt_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fl_actual_values2_amk_igbt_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fl_actual_values2_amk_igbt_temp_is_in_range(int16_t value);

/**
 * Pack message Inverter_RR_ActualValues1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_inverter_rr_actual_values1_pack(
    uint8_t *dst_p,
    const struct ifcb_inverter_rr_actual_values1_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_RR_ActualValues1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_inverter_rr_actual_values1_unpack(
    struct ifcb_inverter_rr_actual_values1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_RR_ActualValues1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_inverter_rr_actual_values1_init(struct ifcb_inverter_rr_actual_values1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rr_actual_values1_amk_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_system_ready_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_system_ready_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rr_actual_values1_amk_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_error_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_error_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rr_actual_values1_amk_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_warning_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_warning_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rr_actual_values1_amk_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_quit_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_quit_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rr_actual_values1_amk_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rr_actual_values1_amk_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_quit_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_quit_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rr_actual_values1_amk_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_rr_actual_values1_amk_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_derating_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_derating_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rr_actual_values1_amk_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_actual_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_actual_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rr_actual_values1_amk_torque_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_torque_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_torque_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rr_actual_values1_amk_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values1_amk_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values1_amk_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message Inverter_FR_ActualValues1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_inverter_fr_actual_values1_pack(
    uint8_t *dst_p,
    const struct ifcb_inverter_fr_actual_values1_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_FR_ActualValues1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_inverter_fr_actual_values1_unpack(
    struct ifcb_inverter_fr_actual_values1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_FR_ActualValues1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_inverter_fr_actual_values1_init(struct ifcb_inverter_fr_actual_values1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fr_actual_values1_amk_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_system_ready_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_system_ready_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fr_actual_values1_amk_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_error_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_error_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fr_actual_values1_amk_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_warning_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_warning_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fr_actual_values1_amk_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_quit_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_quit_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fr_actual_values1_amk_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_dc_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_dc_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fr_actual_values1_amk_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_quit_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_quit_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fr_actual_values1_amk_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_inverter_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_inverter_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ifcb_inverter_fr_actual_values1_amk_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_derating_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_derating_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fr_actual_values1_amk_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_actual_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_actual_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fr_actual_values1_amk_torque_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_torque_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_torque_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fr_actual_values1_amk_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values1_amk_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values1_amk_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message Inverter_RR_ActualValues2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_inverter_rr_actual_values2_pack(
    uint8_t *dst_p,
    const struct ifcb_inverter_rr_actual_values2_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_RR_ActualValues2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_inverter_rr_actual_values2_unpack(
    struct ifcb_inverter_rr_actual_values2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_RR_ActualValues2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_inverter_rr_actual_values2_init(struct ifcb_inverter_rr_actual_values2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rr_actual_values2_amk_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values2_amk_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values2_amk_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rr_actual_values2_amk_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values2_amk_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values2_amk_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ifcb_inverter_rr_actual_values2_amk_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values2_amk_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values2_amk_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_rr_actual_values2_amk_igbt_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_rr_actual_values2_amk_igbt_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_rr_actual_values2_amk_igbt_temp_is_in_range(int16_t value);

/**
 * Pack message Inverter_FR_ActualValues2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ifcb_inverter_fr_actual_values2_pack(
    uint8_t *dst_p,
    const struct ifcb_inverter_fr_actual_values2_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_FR_ActualValues2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ifcb_inverter_fr_actual_values2_unpack(
    struct ifcb_inverter_fr_actual_values2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_FR_ActualValues2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ifcb_inverter_fr_actual_values2_init(struct ifcb_inverter_fr_actual_values2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fr_actual_values2_amk_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values2_amk_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values2_amk_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fr_actual_values2_amk_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values2_amk_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values2_amk_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ifcb_inverter_fr_actual_values2_amk_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values2_amk_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values2_amk_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ifcb_inverter_fr_actual_values2_amk_igbt_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ifcb_inverter_fr_actual_values2_amk_igbt_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ifcb_inverter_fr_actual_values2_amk_igbt_temp_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
