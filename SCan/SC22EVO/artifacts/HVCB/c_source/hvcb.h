/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Thu Jul 11 14:13:50 2024.
 */

#ifndef HVCB_H
#define HVCB_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define HVCB_INFO_01_DBG_V_FRAME_ID (0x120u)
#define HVCB_INFO_02_DBG_T_FRAME_ID (0x121u)
#define HVCB_HVB_TX_VCU_CMD_FRAME_ID (0x150u)
#define HVCB_HVB_RX_DIAGNOSIS_FRAME_ID (0x200u)
#define HVCB_HVB_RX_CURRENT_LIMITS_FRAME_ID (0x202u)
#define HVCB_HVB_RX_STATUS_FRAME_ID (0x203u)
#define HVCB_HVB_RX_MEASURE_FRAME_ID (0x204u)
#define HVCB_HVB_RX_ACTUATOR_FRAME_ID (0x205u)
#define HVCB_HVB_RX_V_CELL_FRAME_ID (0x206u)
#define HVCB_HVB_RX_SOC_FRAME_ID (0x207u)
#define HVCB_HVB_RX_T_CELL_FRAME_ID (0x208u)
#define HVCB_HVB_RX_INSULATION_FRAME_ID (0x209u)
#define HVCB_HVB_RX_SW_VERSION_FRAME_ID (0x20fu)
#define HVCB_IVT_MAIN_MSG_CMD_FRAME_ID (0x411u)
#define HVCB_IVT_MAIN_MSG_RESPONSE_FRAME_ID (0x511u)
#define HVCB_IVT_MAIN_MSG_RESULT_I_FRAME_ID (0x521u)
#define HVCB_IVT_MAIN_MSG_RESULT_U1_FRAME_ID (0x522u)
#define HVCB_IVT_MAIN_MSG_RESULT_U2_FRAME_ID (0x523u)
#define HVCB_IVT_MAIN_MSG_RESULT_U3_FRAME_ID (0x524u)
#define HVCB_IVT_MAIN_MSG_RESULT_T_FRAME_ID (0x525u)
#define HVCB_IVT_MAIN_MSG_RESULT_W_FRAME_ID (0x526u)
#define HVCB_IVT_MAIN_MSG_RESULT_AS_FRAME_ID (0x527u)
#define HVCB_IVT_MAIN_MSG_RESULT_WH_FRAME_ID (0x528u)

/* Frame lengths in bytes. */
#define HVCB_INFO_01_DBG_V_LENGTH (8u)
#define HVCB_INFO_02_DBG_T_LENGTH (8u)
#define HVCB_HVB_TX_VCU_CMD_LENGTH (2u)
#define HVCB_HVB_RX_DIAGNOSIS_LENGTH (8u)
#define HVCB_HVB_RX_CURRENT_LIMITS_LENGTH (8u)
#define HVCB_HVB_RX_STATUS_LENGTH (8u)
#define HVCB_HVB_RX_MEASURE_LENGTH (8u)
#define HVCB_HVB_RX_ACTUATOR_LENGTH (8u)
#define HVCB_HVB_RX_V_CELL_LENGTH (8u)
#define HVCB_HVB_RX_SOC_LENGTH (8u)
#define HVCB_HVB_RX_T_CELL_LENGTH (8u)
#define HVCB_HVB_RX_INSULATION_LENGTH (8u)
#define HVCB_HVB_RX_SW_VERSION_LENGTH (8u)
#define HVCB_IVT_MAIN_MSG_CMD_LENGTH (8u)
#define HVCB_IVT_MAIN_MSG_RESPONSE_LENGTH (8u)
#define HVCB_IVT_MAIN_MSG_RESULT_I_LENGTH (6u)
#define HVCB_IVT_MAIN_MSG_RESULT_U1_LENGTH (6u)
#define HVCB_IVT_MAIN_MSG_RESULT_U2_LENGTH (6u)
#define HVCB_IVT_MAIN_MSG_RESULT_U3_LENGTH (6u)
#define HVCB_IVT_MAIN_MSG_RESULT_T_LENGTH (6u)
#define HVCB_IVT_MAIN_MSG_RESULT_W_LENGTH (6u)
#define HVCB_IVT_MAIN_MSG_RESULT_AS_LENGTH (6u)
#define HVCB_IVT_MAIN_MSG_RESULT_WH_LENGTH (6u)

/* Extended or standard frame types. */
#define HVCB_INFO_01_DBG_V_IS_EXTENDED (0)
#define HVCB_INFO_02_DBG_T_IS_EXTENDED (0)
#define HVCB_HVB_TX_VCU_CMD_IS_EXTENDED (0)
#define HVCB_HVB_RX_DIAGNOSIS_IS_EXTENDED (0)
#define HVCB_HVB_RX_CURRENT_LIMITS_IS_EXTENDED (0)
#define HVCB_HVB_RX_STATUS_IS_EXTENDED (0)
#define HVCB_HVB_RX_MEASURE_IS_EXTENDED (0)
#define HVCB_HVB_RX_ACTUATOR_IS_EXTENDED (0)
#define HVCB_HVB_RX_V_CELL_IS_EXTENDED (0)
#define HVCB_HVB_RX_SOC_IS_EXTENDED (0)
#define HVCB_HVB_RX_T_CELL_IS_EXTENDED (0)
#define HVCB_HVB_RX_INSULATION_IS_EXTENDED (0)
#define HVCB_HVB_RX_SW_VERSION_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_CMD_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESPONSE_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESULT_I_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESULT_U1_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESULT_U2_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESULT_U3_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESULT_T_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESULT_W_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESULT_AS_IS_EXTENDED (0)
#define HVCB_IVT_MAIN_MSG_RESULT_WH_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define HVCB_INFO_01_DBG_V_CYCLE_TIME_MS (5u)
#define HVCB_INFO_02_DBG_T_CYCLE_TIME_MS (10u)
#define HVCB_HVB_TX_VCU_CMD_CYCLE_TIME_MS (100u)
#define HVCB_HVB_RX_DIAGNOSIS_CYCLE_TIME_MS (10u)
#define HVCB_HVB_RX_CURRENT_LIMITS_CYCLE_TIME_MS (60u)
#define HVCB_HVB_RX_STATUS_CYCLE_TIME_MS (20u)
#define HVCB_HVB_RX_MEASURE_CYCLE_TIME_MS (20u)
#define HVCB_HVB_RX_ACTUATOR_CYCLE_TIME_MS (20u)
#define HVCB_HVB_RX_V_CELL_CYCLE_TIME_MS (100u)
#define HVCB_HVB_RX_SOC_CYCLE_TIME_MS (100u)
#define HVCB_HVB_RX_T_CELL_CYCLE_TIME_MS (100u)
#define HVCB_HVB_RX_INSULATION_CYCLE_TIME_MS (200u)
#define HVCB_HVB_RX_SW_VERSION_CYCLE_TIME_MS (1000u)
#define HVCB_IVT_MAIN_MSG_RESULT_I_CYCLE_TIME_MS (20u)
#define HVCB_IVT_MAIN_MSG_RESULT_U1_CYCLE_TIME_MS (60u)
#define HVCB_IVT_MAIN_MSG_RESULT_U2_CYCLE_TIME_MS (60u)
#define HVCB_IVT_MAIN_MSG_RESULT_U3_CYCLE_TIME_MS (60u)
#define HVCB_IVT_MAIN_MSG_RESULT_T_CYCLE_TIME_MS (100u)
#define HVCB_IVT_MAIN_MSG_RESULT_W_CYCLE_TIME_MS (60u)
#define HVCB_IVT_MAIN_MSG_RESULT_AS_CYCLE_TIME_MS (100u)
#define HVCB_IVT_MAIN_MSG_RESULT_WH_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define HVCB_HVB_TX_VCU_CMD_VCU_B_HVB_INV_REQ_DISABLED_CHOICE (0u)
#define HVCB_HVB_TX_VCU_CMD_VCU_B_HVB_INV_REQ_ENABLED_CHOICE (1u)

#define HVCB_HVB_TX_VCU_CMD_VCU_B_ALL_VT_REQ_DISABLED_CHOICE (0u)
#define HVCB_HVB_TX_VCU_CMD_VCU_B_ALL_VT_REQ_ENABLED_CHOICE (1u)

#define HVCB_HVB_TX_VCU_CMD_VCU_B_BAL_REQ_DISABLED_CHOICE (0u)
#define HVCB_HVB_TX_VCU_CMD_VCU_B_BAL_REQ_ENABLED_CHOICE (1u)

#define HVCB_HVB_RX_STATUS_HVB_ST_SYS_OFF_CHOICE (0u)
#define HVCB_HVB_RX_STATUS_HVB_ST_SYS_STARTUP_CHOICE (1u)
#define HVCB_HVB_RX_STATUS_HVB_ST_SYS_ON_CHOICE (2u)
#define HVCB_HVB_RX_STATUS_HVB_ST_SYS_SHUTDOWN_CHOICE (3u)
#define HVCB_HVB_RX_STATUS_HVB_ST_SYS_ERROR_CHOICE (5u)

#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_POS_ST_OPEN_CHOICE (0u)
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_POS_ST_CLOSED_CHOICE (1u)

#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_POS_CMD_OPEN_CHOICE (0u)
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_POS_CMD_CLOSED_CHOICE (1u)

#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_PRE_ST_OPEN_CHOICE (0u)
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_PRE_ST_CLOSED_CHOICE (1u)

#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_PRE_CMD_OPEN_CHOICE (0u)
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_PRE_CMD_CLOSED_CHOICE (1u)

#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_NEG_ST_OPEN_CHOICE (0u)
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_NEG_ST_CLOSED_CHOICE (1u)

#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_NEG_CMD_OPEN_CHOICE (0u)
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_NEG_CMD_CLOSED_CHOICE (1u)

#define HVCB_HVB_RX_INSULATION_HVB_ST_RES_ISOL_ERROR_CHOICE (0u)
#define HVCB_HVB_RX_INSULATION_HVB_ST_RES_ISOL_OK_CHOICE (1u)
#define HVCB_HVB_RX_INSULATION_HVB_ST_RES_ISOL_UNDERVOLTAGE_CHOICE (2u)
#define HVCB_HVB_RX_INSULATION_HVB_ST_RES_ISOL_SPEEDSTART_CHOICE (3u)
#define HVCB_HVB_RX_INSULATION_HVB_ST_RES_ISOL_INTERNAL_CHOICE (4u)
#define HVCB_HVB_RX_INSULATION_HVB_ST_RES_ISOL_UNKNOWN_CHOICE (6u)

#define HVCB_IVT_MAIN_MSG_RESULT_I_IVT_MAIN_ID_RESULT_I_VT_RESULT_I_CHOICE (0u)

#define HVCB_IVT_MAIN_MSG_RESULT_U1_IVT_MAIN_ID_RESULT_U1_VT_RESULT_U1_CHOICE (1u)

#define HVCB_IVT_MAIN_MSG_RESULT_U2_IVT_MAIN_ID_RESULT_U2_VT_RESULT_U2_CHOICE (2u)

#define HVCB_IVT_MAIN_MSG_RESULT_U3_IVT_MAIN_ID_RESULT_U3_VT_RESULT_U3_CHOICE (3u)

#define HVCB_IVT_MAIN_MSG_RESULT_T_IVT_MAIN_ID_RESULT_T_VT_RESULT_T_CHOICE (4u)

#define HVCB_IVT_MAIN_MSG_RESULT_W_IVT_MAIN_ID_RESULT_W_VT_RESULT_W_CHOICE (5u)

#define HVCB_IVT_MAIN_MSG_RESULT_AS_IVT_MAIN_ID_RESULT_AS_VT_RESULT_AS_CHOICE (6u)

#define HVCB_IVT_MAIN_MSG_RESULT_WH_IVT_MAIN_ID_RESULT_WH_VT_RESULT_WH_CHOICE (7u)

/* Frame Names. */
#define HVCB_INFO_01_DBG_V_NAME "INFO_01_DbgV"
#define HVCB_INFO_02_DBG_T_NAME "INFO_02_DbgT"
#define HVCB_HVB_TX_VCU_CMD_NAME "HVB_TX_VCUCmd"
#define HVCB_HVB_RX_DIAGNOSIS_NAME "HVB_RX_Diagnosis"
#define HVCB_HVB_RX_CURRENT_LIMITS_NAME "HVB_RX_CurrentLimits"
#define HVCB_HVB_RX_STATUS_NAME "HVB_RX_Status"
#define HVCB_HVB_RX_MEASURE_NAME "HVB_RX_Measure"
#define HVCB_HVB_RX_ACTUATOR_NAME "HVB_RX_Actuator"
#define HVCB_HVB_RX_V_CELL_NAME "HVB_RX_VCell"
#define HVCB_HVB_RX_SOC_NAME "HVB_RX_SOC"
#define HVCB_HVB_RX_T_CELL_NAME "HVB_RX_TCell"
#define HVCB_HVB_RX_INSULATION_NAME "HVB_RX_Insulation"
#define HVCB_HVB_RX_SW_VERSION_NAME "HVB_RX_SWVersion"
#define HVCB_IVT_MAIN_MSG_CMD_NAME "IVTMain_Msg_Cmd"
#define HVCB_IVT_MAIN_MSG_RESPONSE_NAME "IVTMain_Msg_Response"
#define HVCB_IVT_MAIN_MSG_RESULT_I_NAME "IVTMain_Msg_Result_I"
#define HVCB_IVT_MAIN_MSG_RESULT_U1_NAME "IVTMain_Msg_Result_U1"
#define HVCB_IVT_MAIN_MSG_RESULT_U2_NAME "IVTMain_Msg_Result_U2"
#define HVCB_IVT_MAIN_MSG_RESULT_U3_NAME "IVTMain_Msg_Result_U3"
#define HVCB_IVT_MAIN_MSG_RESULT_T_NAME "IVTMain_Msg_Result_T"
#define HVCB_IVT_MAIN_MSG_RESULT_W_NAME "IVTMain_Msg_Result_W"
#define HVCB_IVT_MAIN_MSG_RESULT_AS_NAME "IVTMain_Msg_Result_As"
#define HVCB_IVT_MAIN_MSG_RESULT_WH_NAME "IVTMain_Msg_Result_Wh"

/* Signal Names. */
#define HVCB_INFO_01_DBG_V_BMS_E_DBG_V_ID_NAME "BMS_eDbgVId"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V000_NAME "BMS_VDbgV000"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V003_NAME "BMS_VDbgV003"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V006_NAME "BMS_VDbgV006"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V009_NAME "BMS_VDbgV009"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V012_NAME "BMS_VDbgV012"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V015_NAME "BMS_VDbgV015"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V018_NAME "BMS_VDbgV018"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V021_NAME "BMS_VDbgV021"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V024_NAME "BMS_VDbgV024"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V027_NAME "BMS_VDbgV027"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V030_NAME "BMS_VDbgV030"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V033_NAME "BMS_VDbgV033"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V036_NAME "BMS_VDbgV036"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V039_NAME "BMS_VDbgV039"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V042_NAME "BMS_VDbgV042"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V045_NAME "BMS_VDbgV045"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V048_NAME "BMS_VDbgV048"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V051_NAME "BMS_VDbgV051"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V054_NAME "BMS_VDbgV054"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V057_NAME "BMS_VDbgV057"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V060_NAME "BMS_VDbgV060"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V063_NAME "BMS_VDbgV063"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V066_NAME "BMS_VDbgV066"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V069_NAME "BMS_VDbgV069"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V072_NAME "BMS_VDbgV072"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V075_NAME "BMS_VDbgV075"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V078_NAME "BMS_VDbgV078"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V081_NAME "BMS_VDbgV081"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V084_NAME "BMS_VDbgV084"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V087_NAME "BMS_VDbgV087"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V090_NAME "BMS_VDbgV090"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V093_NAME "BMS_VDbgV093"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V096_NAME "BMS_VDbgV096"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V099_NAME "BMS_VDbgV099"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V102_NAME "BMS_VDbgV102"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V105_NAME "BMS_VDbgV105"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V108_NAME "BMS_VDbgV108"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V111_NAME "BMS_VDbgV111"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V114_NAME "BMS_VDbgV114"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V117_NAME "BMS_VDbgV117"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V120_NAME "BMS_VDbgV120"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V123_NAME "BMS_VDbgV123"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V126_NAME "BMS_VDbgV126"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V129_NAME "BMS_VDbgV129"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V132_NAME "BMS_VDbgV132"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V135_NAME "BMS_VDbgV135"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V138_NAME "BMS_VDbgV138"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V141_NAME "BMS_VDbgV141"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V144_NAME "BMS_VDbgV144"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V147_NAME "BMS_VDbgV147"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V150_NAME "BMS_VDbgV150"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V153_NAME "BMS_VDbgV153"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V156_NAME "BMS_VDbgV156"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V159_NAME "BMS_VDbgV159"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V162_NAME "BMS_VDbgV162"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V165_NAME "BMS_VDbgV165"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V168_NAME "BMS_VDbgV168"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V171_NAME "BMS_VDbgV171"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V174_NAME "BMS_VDbgV174"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V177_NAME "BMS_VDbgV177"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V180_NAME "BMS_VDbgV180"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V183_NAME "BMS_VDbgV183"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V186_NAME "BMS_VDbgV186"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V189_NAME "BMS_VDbgV189"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V192_NAME "BMS_VDbgV192"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V195_NAME "BMS_VDbgV195"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V198_NAME "BMS_VDbgV198"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V201_NAME "BMS_VDbgV201"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V204_NAME "BMS_VDbgV204"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V207_NAME "BMS_VDbgV207"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V210_NAME "BMS_VDbgV210"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V213_NAME "BMS_VDbgV213"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V216_NAME "BMS_VDbgV216"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V219_NAME "BMS_VDbgV219"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V222_NAME "BMS_VDbgV222"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V225_NAME "BMS_VDbgV225"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V228_NAME "BMS_VDbgV228"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V231_NAME "BMS_VDbgV231"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V234_NAME "BMS_VDbgV234"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V237_NAME "BMS_VDbgV237"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V240_NAME "BMS_VDbgV240"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V243_NAME "BMS_VDbgV243"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V246_NAME "BMS_VDbgV246"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V249_NAME "BMS_VDbgV249"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V252_NAME "BMS_VDbgV252"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V255_NAME "BMS_VDbgV255"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V001_NAME "BMS_VDbgV001"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V004_NAME "BMS_VDbgV004"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V007_NAME "BMS_VDbgV007"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V010_NAME "BMS_VDbgV010"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V013_NAME "BMS_VDbgV013"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V016_NAME "BMS_VDbgV016"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V019_NAME "BMS_VDbgV019"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V022_NAME "BMS_VDbgV022"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V025_NAME "BMS_VDbgV025"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V028_NAME "BMS_VDbgV028"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V031_NAME "BMS_VDbgV031"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V034_NAME "BMS_VDbgV034"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V037_NAME "BMS_VDbgV037"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V040_NAME "BMS_VDbgV040"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V043_NAME "BMS_VDbgV043"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V046_NAME "BMS_VDbgV046"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V049_NAME "BMS_VDbgV049"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V052_NAME "BMS_VDbgV052"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V055_NAME "BMS_VDbgV055"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V058_NAME "BMS_VDbgV058"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V061_NAME "BMS_VDbgV061"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V064_NAME "BMS_VDbgV064"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V067_NAME "BMS_VDbgV067"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V070_NAME "BMS_VDbgV070"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V073_NAME "BMS_VDbgV073"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V076_NAME "BMS_VDbgV076"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V079_NAME "BMS_VDbgV079"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V082_NAME "BMS_VDbgV082"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V085_NAME "BMS_VDbgV085"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V088_NAME "BMS_VDbgV088"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V091_NAME "BMS_VDbgV091"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V094_NAME "BMS_VDbgV094"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V097_NAME "BMS_VDbgV097"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V100_NAME "BMS_VDbgV100"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V103_NAME "BMS_VDbgV103"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V106_NAME "BMS_VDbgV106"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V109_NAME "BMS_VDbgV109"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V112_NAME "BMS_VDbgV112"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V115_NAME "BMS_VDbgV115"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V118_NAME "BMS_VDbgV118"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V121_NAME "BMS_VDbgV121"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V124_NAME "BMS_VDbgV124"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V127_NAME "BMS_VDbgV127"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V130_NAME "BMS_VDbgV130"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V133_NAME "BMS_VDbgV133"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V136_NAME "BMS_VDbgV136"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V139_NAME "BMS_VDbgV139"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V142_NAME "BMS_VDbgV142"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V145_NAME "BMS_VDbgV145"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V148_NAME "BMS_VDbgV148"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V151_NAME "BMS_VDbgV151"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V154_NAME "BMS_VDbgV154"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V157_NAME "BMS_VDbgV157"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V160_NAME "BMS_VDbgV160"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V163_NAME "BMS_VDbgV163"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V166_NAME "BMS_VDbgV166"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V169_NAME "BMS_VDbgV169"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V172_NAME "BMS_VDbgV172"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V175_NAME "BMS_VDbgV175"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V178_NAME "BMS_VDbgV178"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V181_NAME "BMS_VDbgV181"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V184_NAME "BMS_VDbgV184"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V187_NAME "BMS_VDbgV187"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V190_NAME "BMS_VDbgV190"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V193_NAME "BMS_VDbgV193"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V196_NAME "BMS_VDbgV196"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V199_NAME "BMS_VDbgV199"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V202_NAME "BMS_VDbgV202"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V205_NAME "BMS_VDbgV205"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V208_NAME "BMS_VDbgV208"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V211_NAME "BMS_VDbgV211"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V214_NAME "BMS_VDbgV214"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V217_NAME "BMS_VDbgV217"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V220_NAME "BMS_VDbgV220"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V223_NAME "BMS_VDbgV223"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V226_NAME "BMS_VDbgV226"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V229_NAME "BMS_VDbgV229"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V232_NAME "BMS_VDbgV232"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V235_NAME "BMS_VDbgV235"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V238_NAME "BMS_VDbgV238"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V241_NAME "BMS_VDbgV241"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V244_NAME "BMS_VDbgV244"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V247_NAME "BMS_VDbgV247"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V250_NAME "BMS_VDbgV250"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V253_NAME "BMS_VDbgV253"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V002_NAME "BMS_VDbgV002"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V005_NAME "BMS_VDbgV005"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V008_NAME "BMS_VDbgV008"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V011_NAME "BMS_VDbgV011"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V014_NAME "BMS_VDbgV014"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V017_NAME "BMS_VDbgV017"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V020_NAME "BMS_VDbgV020"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V023_NAME "BMS_VDbgV023"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V026_NAME "BMS_VDbgV026"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V029_NAME "BMS_VDbgV029"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V032_NAME "BMS_VDbgV032"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V035_NAME "BMS_VDbgV035"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V038_NAME "BMS_VDbgV038"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V041_NAME "BMS_VDbgV041"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V044_NAME "BMS_VDbgV044"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V047_NAME "BMS_VDbgV047"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V050_NAME "BMS_VDbgV050"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V053_NAME "BMS_VDbgV053"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V056_NAME "BMS_VDbgV056"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V059_NAME "BMS_VDbgV059"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V062_NAME "BMS_VDbgV062"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V065_NAME "BMS_VDbgV065"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V068_NAME "BMS_VDbgV068"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V071_NAME "BMS_VDbgV071"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V074_NAME "BMS_VDbgV074"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V077_NAME "BMS_VDbgV077"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V080_NAME "BMS_VDbgV080"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V083_NAME "BMS_VDbgV083"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V086_NAME "BMS_VDbgV086"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V089_NAME "BMS_VDbgV089"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V092_NAME "BMS_VDbgV092"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V095_NAME "BMS_VDbgV095"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V098_NAME "BMS_VDbgV098"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V101_NAME "BMS_VDbgV101"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V104_NAME "BMS_VDbgV104"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V107_NAME "BMS_VDbgV107"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V110_NAME "BMS_VDbgV110"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V113_NAME "BMS_VDbgV113"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V116_NAME "BMS_VDbgV116"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V119_NAME "BMS_VDbgV119"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V122_NAME "BMS_VDbgV122"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V125_NAME "BMS_VDbgV125"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V128_NAME "BMS_VDbgV128"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V131_NAME "BMS_VDbgV131"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V134_NAME "BMS_VDbgV134"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V137_NAME "BMS_VDbgV137"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V140_NAME "BMS_VDbgV140"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V143_NAME "BMS_VDbgV143"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V146_NAME "BMS_VDbgV146"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V149_NAME "BMS_VDbgV149"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V152_NAME "BMS_VDbgV152"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V155_NAME "BMS_VDbgV155"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V158_NAME "BMS_VDbgV158"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V161_NAME "BMS_VDbgV161"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V164_NAME "BMS_VDbgV164"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V167_NAME "BMS_VDbgV167"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V170_NAME "BMS_VDbgV170"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V173_NAME "BMS_VDbgV173"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V176_NAME "BMS_VDbgV176"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V179_NAME "BMS_VDbgV179"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V182_NAME "BMS_VDbgV182"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V185_NAME "BMS_VDbgV185"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V188_NAME "BMS_VDbgV188"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V191_NAME "BMS_VDbgV191"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V194_NAME "BMS_VDbgV194"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V197_NAME "BMS_VDbgV197"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V200_NAME "BMS_VDbgV200"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V203_NAME "BMS_VDbgV203"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V206_NAME "BMS_VDbgV206"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V209_NAME "BMS_VDbgV209"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V212_NAME "BMS_VDbgV212"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V215_NAME "BMS_VDbgV215"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V218_NAME "BMS_VDbgV218"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V221_NAME "BMS_VDbgV221"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V224_NAME "BMS_VDbgV224"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V227_NAME "BMS_VDbgV227"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V230_NAME "BMS_VDbgV230"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V233_NAME "BMS_VDbgV233"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V236_NAME "BMS_VDbgV236"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V239_NAME "BMS_VDbgV239"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V242_NAME "BMS_VDbgV242"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V245_NAME "BMS_VDbgV245"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V248_NAME "BMS_VDbgV248"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V251_NAME "BMS_VDbgV251"
#define HVCB_INFO_01_DBG_V_BMS_V_DBG_V254_NAME "BMS_VDbgV254"
#define HVCB_INFO_02_DBG_T_BMS_E_DBG_T_ID_NAME "BMS_eDbgTId"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T000_NAME "BMS_TDbgT000"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T003_NAME "BMS_TDbgT003"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T006_NAME "BMS_TDbgT006"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T009_NAME "BMS_TDbgT009"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T012_NAME "BMS_TDbgT012"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T015_NAME "BMS_TDbgT015"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T018_NAME "BMS_TDbgT018"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T021_NAME "BMS_TDbgT021"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T024_NAME "BMS_TDbgT024"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T027_NAME "BMS_TDbgT027"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T030_NAME "BMS_TDbgT030"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T033_NAME "BMS_TDbgT033"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T036_NAME "BMS_TDbgT036"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T039_NAME "BMS_TDbgT039"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T042_NAME "BMS_TDbgT042"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T045_NAME "BMS_TDbgT045"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T048_NAME "BMS_TDbgT048"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T051_NAME "BMS_TDbgT051"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T054_NAME "BMS_TDbgT054"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T057_NAME "BMS_TDbgT057"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T060_NAME "BMS_TDbgT060"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T063_NAME "BMS_TDbgT063"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T066_NAME "BMS_TDbgT066"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T069_NAME "BMS_TDbgT069"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T072_NAME "BMS_TDbgT072"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T075_NAME "BMS_TDbgT075"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T078_NAME "BMS_TDbgT078"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T081_NAME "BMS_TDbgT081"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T084_NAME "BMS_TDbgT084"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T087_NAME "BMS_TDbgT087"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T090_NAME "BMS_TDbgT090"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T093_NAME "BMS_TDbgT093"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T096_NAME "BMS_TDbgT096"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T099_NAME "BMS_TDbgT099"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T102_NAME "BMS_TDbgT102"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T105_NAME "BMS_TDbgT105"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T108_NAME "BMS_TDbgT108"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T111_NAME "BMS_TDbgT111"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T114_NAME "BMS_TDbgT114"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T117_NAME "BMS_TDbgT117"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T120_NAME "BMS_TDbgT120"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T123_NAME "BMS_TDbgT123"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T126_NAME "BMS_TDbgT126"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T001_NAME "BMS_TDbgT001"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T004_NAME "BMS_TDbgT004"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T007_NAME "BMS_TDbgT007"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T010_NAME "BMS_TDbgT010"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T013_NAME "BMS_TDbgT013"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T016_NAME "BMS_TDbgT016"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T019_NAME "BMS_TDbgT019"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T022_NAME "BMS_TDbgT022"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T025_NAME "BMS_TDbgT025"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T028_NAME "BMS_TDbgT028"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T031_NAME "BMS_TDbgT031"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T034_NAME "BMS_TDbgT034"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T037_NAME "BMS_TDbgT037"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T040_NAME "BMS_TDbgT040"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T043_NAME "BMS_TDbgT043"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T046_NAME "BMS_TDbgT046"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T049_NAME "BMS_TDbgT049"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T052_NAME "BMS_TDbgT052"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T055_NAME "BMS_TDbgT055"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T058_NAME "BMS_TDbgT058"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T061_NAME "BMS_TDbgT061"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T064_NAME "BMS_TDbgT064"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T067_NAME "BMS_TDbgT067"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T070_NAME "BMS_TDbgT070"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T073_NAME "BMS_TDbgT073"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T076_NAME "BMS_TDbgT076"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T079_NAME "BMS_TDbgT079"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T082_NAME "BMS_TDbgT082"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T085_NAME "BMS_TDbgT085"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T088_NAME "BMS_TDbgT088"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T091_NAME "BMS_TDbgT091"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T094_NAME "BMS_TDbgT094"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T097_NAME "BMS_TDbgT097"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T100_NAME "BMS_TDbgT100"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T103_NAME "BMS_TDbgT103"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T106_NAME "BMS_TDbgT106"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T109_NAME "BMS_TDbgT109"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T112_NAME "BMS_TDbgT112"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T115_NAME "BMS_TDbgT115"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T118_NAME "BMS_TDbgT118"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T121_NAME "BMS_TDbgT121"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T124_NAME "BMS_TDbgT124"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T127_NAME "BMS_TDbgT127"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T002_NAME "BMS_TDbgT002"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T005_NAME "BMS_TDbgT005"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T008_NAME "BMS_TDbgT008"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T011_NAME "BMS_TDbgT011"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T014_NAME "BMS_TDbgT014"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T017_NAME "BMS_TDbgT017"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T020_NAME "BMS_TDbgT020"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T023_NAME "BMS_TDbgT023"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T026_NAME "BMS_TDbgT026"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T029_NAME "BMS_TDbgT029"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T032_NAME "BMS_TDbgT032"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T035_NAME "BMS_TDbgT035"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T038_NAME "BMS_TDbgT038"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T041_NAME "BMS_TDbgT041"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T044_NAME "BMS_TDbgT044"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T047_NAME "BMS_TDbgT047"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T050_NAME "BMS_TDbgT050"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T053_NAME "BMS_TDbgT053"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T056_NAME "BMS_TDbgT056"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T059_NAME "BMS_TDbgT059"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T062_NAME "BMS_TDbgT062"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T065_NAME "BMS_TDbgT065"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T068_NAME "BMS_TDbgT068"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T071_NAME "BMS_TDbgT071"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T074_NAME "BMS_TDbgT074"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T077_NAME "BMS_TDbgT077"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T080_NAME "BMS_TDbgT080"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T083_NAME "BMS_TDbgT083"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T086_NAME "BMS_TDbgT086"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T089_NAME "BMS_TDbgT089"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T092_NAME "BMS_TDbgT092"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T095_NAME "BMS_TDbgT095"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T098_NAME "BMS_TDbgT098"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T101_NAME "BMS_TDbgT101"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T104_NAME "BMS_TDbgT104"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T107_NAME "BMS_TDbgT107"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T110_NAME "BMS_TDbgT110"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T113_NAME "BMS_TDbgT113"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T116_NAME "BMS_TDbgT116"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T119_NAME "BMS_TDbgT119"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T122_NAME "BMS_TDbgT122"
#define HVCB_INFO_02_DBG_T_BMS_T_DBG_T125_NAME "BMS_TDbgT125"
#define HVCB_HVB_TX_VCU_CMD_VCU_CLR_ERR_NAME "VCU_ClrErr"
#define HVCB_HVB_TX_VCU_CMD_VCU_B_HVB_INV_REQ_NAME "VCU_bHvbInvReq"
#define HVCB_HVB_TX_VCU_CMD_VCU_B_ALL_VT_REQ_NAME "VCU_bAllVTReq"
#define HVCB_HVB_TX_VCU_CMD_VCU_B_BAL_REQ_NAME "VCU_bBalReq"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_UART_NAME "HVB_Diag_UART"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_CAN_NAME "HVB_Diag_CAN"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_RAM_NAME "HVB_Diag_RAM"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_EEPROM_NAME "HVB_Diag_eeprom"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_FLASH_NAME "HVB_Diag_Flash"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_BAT_VLT_SNA_NAME "HVB_Diag_bat_vlt_sna"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_INV_VLT_SNA_NAME "HVB_Diag_inv_vlt_sna"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_BAT_CURR_SNA_NAME "HVB_Diag_bat_curr_sna"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_VCU_CAN_SNA_NAME "HVB_Diag_vcu_can_sna"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_CELL_SNA_NAME "HVB_Diag_cell_sna"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_IMD_LOW_R_NAME "HVB_Diag_imd__low_r"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_IMD_SNA_NAME "HVB_Diag_imd_sna"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_BAT_UV_NAME "HVB_Diag_bat_uv"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_CELL_OV_NAME "HVB_Diag_cell_ov"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_CELL_UV_NAME "HVB_Diag_cell_uv"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_CELL_OT_NAME "HVB_Diag_cell_ot"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_CELL_UT_NAME "HVB_Diag_cell_ut"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_INV_VLT_OV_NAME "HVB_Diag_inv_vlt_ov"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_DIAG_BAT_CURR_OC_NAME "HVB_Diag_bat_curr_oc"
#define HVCB_HVB_RX_DIAGNOSIS_HVB_RECOVERY_ACTIVE_NAME "HVB_Recovery_Active"
#define HVCB_HVB_RX_CURRENT_LIMITS_HVB_CHARGE_CUR_LIMITS_NAME "HVB_ChargeCurLimits"
#define HVCB_HVB_RX_CURRENT_LIMITS_HVB_DISCHARGE_CUR_LIMITS_NAME "HVB_DischargeCurLimits"
#define HVCB_HVB_RX_CURRENT_LIMITS_HVB_PWR_HVB_NAME "HVB_pwrHvb"
#define HVCB_HVB_RX_STATUS_HVB_ST_SYS_NAME "HVB_stSys"
#define HVCB_HVB_RX_STATUS_HVB_ST_INV_NAME "HVB_stInv"
#define HVCB_HVB_RX_MEASURE_HVB_I_HVB_NAME "HVB_iHvb"
#define HVCB_HVB_RX_MEASURE_HVB_U_HVB_NAME "HVB_uHvb"
#define HVCB_HVB_RX_MEASURE_HVB_U_BUS_NAME "HVB_uBus"
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_POS_ST_NAME "HVB_bInvCntaPosSt"
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_POS_CMD_NAME "HVB_bInvCntaPosCmd"
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_PRE_ST_NAME "HVB_bInvCntaPreSt"
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_PRE_CMD_NAME "HVB_bInvCntaPreCmd"
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_NEG_ST_NAME "HVB_bInvCntaNegSt"
#define HVCB_HVB_RX_ACTUATOR_HVB_B_INV_CNTA_NEG_CMD_NAME "HVB_bInvCntaNegCmd"
#define HVCB_HVB_RX_ACTUATOR_HVB_NO_CNT_ROLL_VCU_NAME "HVB_noCntRoll_VCU"
#define HVCB_HVB_RX_ACTUATOR_HVB_NO_CRC8_REQ_MSG_VCU_NAME "HVB_noCrc8ReqMsg_VCU"
#define HVCB_HVB_RX_V_CELL_HVB_U_CELL_MAX_NAME "HVB_uCellMax"
#define HVCB_HVB_RX_V_CELL_HVB_U_CELL_MEAN_NAME "HVB_uCellMean"
#define HVCB_HVB_RX_V_CELL_HVB_U_CELL_MIN_NAME "HVB_uCellMin"
#define HVCB_HVB_RX_V_CELL_HVB_IDX_CELL_U_MAX_NAME "HVB_idxCell_uMax"
#define HVCB_HVB_RX_V_CELL_HVB_IDX_CELL_U_MIN_NAME "HVB_idxCell_uMin"
#define HVCB_HVB_RX_SOC_HVB_R_SO_C_HVB_U_CELL_MAX_NAME "HVB_rSoCHvb_uCellMax"
#define HVCB_HVB_RX_SOC_HVB_R_SO_C_HVB_U_CELL_MIN_NAME "HVB_rSoCHvb_uCellMin"
#define HVCB_HVB_RX_T_CELL_HVB_T_CELL_MAX_NAME "HVB_tCellMax"
#define HVCB_HVB_RX_T_CELL_HVB_T_CELL_MEAN_NAME "HVB_tCellMean"
#define HVCB_HVB_RX_T_CELL_HVB_T_CELL_MIN_NAME "HVB_tCellMin"
#define HVCB_HVB_RX_INSULATION_HVB_ST_RES_ISOL_NAME "HVB_stResIsol"
#define HVCB_HVB_RX_INSULATION_HVB_RES_ISOL_NAME "HVB_resIsol"
#define HVCB_HVB_RX_SW_VERSION_HVB_NO_SW_VERS0_NAME "HVB_noSwVers0"
#define HVCB_HVB_RX_SW_VERSION_HVB_NO_SW_VERS1_NAME "HVB_noSwVers1"
#define HVCB_IVT_MAIN_MSG_RESULT_I_IVT_MAIN_ID_RESULT_I_NAME "IVTMain_ID_Result_I"
#define HVCB_IVT_MAIN_MSG_RESULT_I_IVT_MAIN_RESULT_I_SYSTEM_ERROR_NAME "IVTMain_Result_I_System_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_I_IVT_MAIN_RESULT_I_MEAS_ERR_NAME "IVTMain_Result_I_Meas_Err"
#define HVCB_IVT_MAIN_MSG_RESULT_I_IVT_MAIN_RESULT_I_CHANNEL_ERROR_NAME "IVTMain_Result_I_Channel_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_I_IVT_MAIN_RESULT_I_OCS_NAME "IVTMain_Result_I_OCS"
#define HVCB_IVT_MAIN_MSG_RESULT_I_IVT_MAIN_MSG_COUNT_RESULT_I_NAME "IVTMain_MsgCount_Result_I"
#define HVCB_IVT_MAIN_MSG_RESULT_I_IVT_MAIN_RESULT_I_NAME "IVTMain_Result_I"
#define HVCB_IVT_MAIN_MSG_RESULT_U1_IVT_MAIN_ID_RESULT_U1_NAME "IVTMain_ID_Result_U1"
#define HVCB_IVT_MAIN_MSG_RESULT_U1_IVT_MAIN_RESULT_U1_SYSTEM_ERROR_NAME "IVTMain_Result_U1_System_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_U1_IVT_MAIN_RESULT_U1_MEAS_ERR_NAME "IVTMain_Result_U1_Meas_Err"
#define HVCB_IVT_MAIN_MSG_RESULT_U1_IVT_MAIN_RESULT_U1_CHANNEL_ERROR_NAME "IVTMain_Result_U1_Channel_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_U1_IVT_MAIN_RESULT_U1_OCS_NAME "IVTMain_Result_U1_OCS"
#define HVCB_IVT_MAIN_MSG_RESULT_U1_IVT_MAIN_MSG_COUNT_RESULT_U1_NAME "IVTMain_MsgCount_Result_U1"
#define HVCB_IVT_MAIN_MSG_RESULT_U1_IVT_MAIN_RESULT_U1_NAME "IVTMain_Result_U1"
#define HVCB_IVT_MAIN_MSG_RESULT_U2_IVT_MAIN_ID_RESULT_U2_NAME "IVTMain_ID_Result_U2"
#define HVCB_IVT_MAIN_MSG_RESULT_U2_IVT_MAIN_RESULT_U2_SYSTEM_ERROR_NAME "IVTMain_Result_U2_System_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_U2_IVT_MAIN_RESULT_U2_MEAS_ERR_NAME "IVTMain_Result_U2_Meas_Err"
#define HVCB_IVT_MAIN_MSG_RESULT_U2_IVT_MAIN_RESULT_U2_CHANNEL_ERROR_NAME "IVTMain_Result_U2_Channel_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_U2_IVT_MAIN_RESULT_U2_OCS_NAME "IVTMain_Result_U2_OCS"
#define HVCB_IVT_MAIN_MSG_RESULT_U2_IVT_MAIN_MSG_COUNT_RESULT_U2_NAME "IVTMain_MsgCount_Result_U2"
#define HVCB_IVT_MAIN_MSG_RESULT_U2_IVT_MAIN_RESULT_U2_NAME "IVTMain_Result_U2"
#define HVCB_IVT_MAIN_MSG_RESULT_U3_IVT_MAIN_ID_RESULT_U3_NAME "IVTMain_ID_Result_U3"
#define HVCB_IVT_MAIN_MSG_RESULT_U3_IVT_MAIN_RESULT_U3_SYSTEM_ERROR_NAME "IVTMain_Result_U3_System_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_U3_IVT_MAIN_RESULT_U3_MEAS_ERR_NAME "IVTMain_Result_U3_Meas_Err"
#define HVCB_IVT_MAIN_MSG_RESULT_U3_IVT_MAIN_RESULT_U3_CHANNEL_ERROR_NAME "IVTMain_Result_U3_Channel_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_U3_IVT_MAIN_RESULT_U3_OCS_NAME "IVTMain_Result_U3_OCS"
#define HVCB_IVT_MAIN_MSG_RESULT_U3_IVT_MAIN_MSG_COUNT_RESULT_U3_NAME "IVTMain_MsgCount_Result_U3"
#define HVCB_IVT_MAIN_MSG_RESULT_U3_IVT_MAIN_RESULT_U3_NAME "IVTMain_Result_U3"
#define HVCB_IVT_MAIN_MSG_RESULT_T_IVT_MAIN_ID_RESULT_T_NAME "IVTMain_ID_Result_T"
#define HVCB_IVT_MAIN_MSG_RESULT_T_IVT_MAIN_RESULT_T_SYSTEM_ERROR_NAME "IVTMain_Result_T_System_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_T_IVT_MAIN_RESULT_T_MEAS_ERR_NAME "IVTMain_Result_T_Meas_Err"
#define HVCB_IVT_MAIN_MSG_RESULT_T_IVT_MAIN_RESULT_T_CHANNEL_ERROR_NAME "IVTMain_Result_T_Channel_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_T_IVT_MAIN_RESULT_T_OCS_NAME "IVTMain_Result_T_OCS"
#define HVCB_IVT_MAIN_MSG_RESULT_T_IVT_MAIN_MSG_COUNT_RESULT_T_NAME "IVTMain_MsgCount_Result_T"
#define HVCB_IVT_MAIN_MSG_RESULT_T_IVT_MAIN_RESULT_T_NAME "IVTMain_Result_T"
#define HVCB_IVT_MAIN_MSG_RESULT_W_IVT_MAIN_ID_RESULT_W_NAME "IVTMain_ID_Result_W"
#define HVCB_IVT_MAIN_MSG_RESULT_W_IVT_MAIN_RESULT_W_SYSTEM_ERROR_NAME "IVTMain_Result_W_System_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_W_IVT_MAIN_RESULT_W_MEAS_ERR_NAME "IVTMain_Result_W_Meas_Err"
#define HVCB_IVT_MAIN_MSG_RESULT_W_IVT_MAIN_RESULT_W_CHANNEL_ERROR_NAME "IVTMain_Result_W_Channel_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_W_IVT_MAIN_RESULT_W_OCS_NAME "IVTMain_Result_W_OCS"
#define HVCB_IVT_MAIN_MSG_RESULT_W_IVT_MAIN_MSG_COUNT_RESULT_W_NAME "IVTMain_MsgCount_Result_W"
#define HVCB_IVT_MAIN_MSG_RESULT_W_IVT_MAIN_RESULT_W_NAME "IVTMain_Result_W"
#define HVCB_IVT_MAIN_MSG_RESULT_AS_IVT_MAIN_ID_RESULT_AS_NAME "IVTMain_ID_Result_As"
#define HVCB_IVT_MAIN_MSG_RESULT_AS_IVT_MAIN_RESULT_AS_SYSTEM_ERROR_NAME "IVTMain_Result_As_System_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_AS_IVT_MAIN_RESULT_AS_MEAS_ERR_NAME "IVTMain_Result_As_Meas_Err"
#define HVCB_IVT_MAIN_MSG_RESULT_AS_IVT_MAIN_RESULT_AS_CHANNEL_ERROR_NAME "IVTMain_Result_As_Channel_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_AS_IVT_MAIN_RESULT_AS_OCS_NAME "IVTMain_Result_As_OCS"
#define HVCB_IVT_MAIN_MSG_RESULT_AS_IVT_MAIN_MSG_COUNT_RESULT_AS_NAME "IVTMain_MsgCount_Result_As"
#define HVCB_IVT_MAIN_MSG_RESULT_AS_IVT_MAIN_RESULT_AS_NAME "IVTMain_Result_As"
#define HVCB_IVT_MAIN_MSG_RESULT_WH_IVT_MAIN_ID_RESULT_WH_NAME "IVTMain_ID_Result_Wh"
#define HVCB_IVT_MAIN_MSG_RESULT_WH_IVT_MAIN_RESULT_WH_SYSTEM_ERROR_NAME "IVTMain_Result_Wh_System_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_WH_IVT_MAIN_RESULT_WH_MEAS_ERR_NAME "IVTMain_Result_Wh_Meas_Err"
#define HVCB_IVT_MAIN_MSG_RESULT_WH_IVT_MAIN_RESULT_WH_CHANNEL_ERROR_NAME "IVTMain_Result_Wh_Channel_Error"
#define HVCB_IVT_MAIN_MSG_RESULT_WH_IVT_MAIN_RESULT_WH_OCS_NAME "IVTMain_Result_Wh_OCS"
#define HVCB_IVT_MAIN_MSG_RESULT_WH_IVT_MAIN_MSG_COUNT_RESULT_WH_NAME "IVTMain_MsgCount_Result_Wh"
#define HVCB_IVT_MAIN_MSG_RESULT_WH_IVT_MAIN_RESULT_WH_NAME "IVTMain_Result_Wh"

/**
 * Signals in message INFO_01_DbgV.
 *
 * Single cell voltage (multiplexed). Sent only if enabled within BMS_00_Req.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_info_01_dbg_v_t {
    /**
     * Single cell ID.
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_e_dbg_v_id;

    /**
     * Cell 0 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v000;

    /**
     * Cell 3 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v003;

    /**
     * Cell 6 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v006;

    /**
     * Cell 9 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v009;

    /**
     * Cell 12 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v012;

    /**
     * Cell 15 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v015;

    /**
     * Cell 18 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v018;

    /**
     * Cell 21 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v021;

    /**
     * Cell 24 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v024;

    /**
     * Cell 27 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v027;

    /**
     * Cell 30 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v030;

    /**
     * Cell 33 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v033;

    /**
     * Cell 36 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v036;

    /**
     * Cell 39 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v039;

    /**
     * Cell 42 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v042;

    /**
     * Cell 45 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v045;

    /**
     * Cell 48 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v048;

    /**
     * Cell 51 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v051;

    /**
     * Cell 54 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v054;

    /**
     * Cell 57 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v057;

    /**
     * Cell 60 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v060;

    /**
     * Cell 63 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v063;

    /**
     * Cell 66 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v066;

    /**
     * Cell 69 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v069;

    /**
     * Cell 72 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v072;

    /**
     * Cell 75 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v075;

    /**
     * Cell 78 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v078;

    /**
     * Cell 81 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v081;

    /**
     * Cell 84 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v084;

    /**
     * Cell 87 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v087;

    /**
     * Cell 90 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v090;

    /**
     * Cell 93 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v093;

    /**
     * Cell 96 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v096;

    /**
     * Cell 99 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v099;

    /**
     * Cell 102 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v102;

    /**
     * Cell 105 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v105;

    /**
     * Cell 108 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v108;

    /**
     * Cell 111 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v111;

    /**
     * Cell 114 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v114;

    /**
     * Cell 117 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v117;

    /**
     * Cell 120 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v120;

    /**
     * Cell 123 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v123;

    /**
     * Cell 126 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v126;

    /**
     * Cell 129 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v129;

    /**
     * Cell 132 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v132;

    /**
     * Cell 135 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v135;

    /**
     * Cell 138 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v138;

    /**
     * Cell 141 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v141;

    /**
     * Cell 144 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v144;

    /**
     * Cell 147 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v147;

    /**
     * Cell 150 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v150;

    /**
     * Cell 153 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v153;

    /**
     * Cell 156 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v156;

    /**
     * Cell 159 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v159;

    /**
     * Cell 162 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v162;

    /**
     * Cell 165 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v165;

    /**
     * Cell 168 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v168;

    /**
     * Cell 171 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v171;

    /**
     * Cell 174 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v174;

    /**
     * Cell 177 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v177;

    /**
     * Cell 180 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v180;

    /**
     * Cell 183 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v183;

    /**
     * Cell 186 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v186;

    /**
     * Cell 189 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v189;

    /**
     * Cell 192 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v192;

    /**
     * Cell 195 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v195;

    /**
     * Cell 198 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v198;

    /**
     * Cell 201 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v201;

    /**
     * Cell 204 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v204;

    /**
     * Cell 207 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v207;

    /**
     * Cell 210 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v210;

    /**
     * Cell 213 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v213;

    /**
     * Cell 216 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v216;

    /**
     * Cell 219 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v219;

    /**
     * Cell 222 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v222;

    /**
     * Cell 225 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v225;

    /**
     * Cell 228 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v228;

    /**
     * Cell 231 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v231;

    /**
     * Cell 234 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v234;

    /**
     * Cell 237 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v237;

    /**
     * Cell 240 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v240;

    /**
     * Cell 243 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v243;

    /**
     * Cell 246 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v246;

    /**
     * Cell 249 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v249;

    /**
     * Cell 252 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v252;

    /**
     * Cell 255 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v255;

    /**
     * Cell 1 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v001;

    /**
     * Cell 4 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v004;

    /**
     * Cell 7 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v007;

    /**
     * Cell 10 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v010;

    /**
     * Cell 13 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v013;

    /**
     * Cell 16 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v016;

    /**
     * Cell 19 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v019;

    /**
     * Cell 22 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v022;

    /**
     * Cell 25 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v025;

    /**
     * Cell 28 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v028;

    /**
     * Cell 31 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v031;

    /**
     * Cell 34 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v034;

    /**
     * Cell 37 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v037;

    /**
     * Cell 40 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v040;

    /**
     * Cell 43 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v043;

    /**
     * Cell 46 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v046;

    /**
     * Cell 49 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v049;

    /**
     * Cell 52 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v052;

    /**
     * Cell 55 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v055;

    /**
     * Cell 58 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v058;

    /**
     * Cell 61 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v061;

    /**
     * Cell 64 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v064;

    /**
     * Cell 67 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v067;

    /**
     * Cell 70 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v070;

    /**
     * Cell 73 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v073;

    /**
     * Cell 76 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v076;

    /**
     * Cell 79 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v079;

    /**
     * Cell 82 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v082;

    /**
     * Cell 85 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v085;

    /**
     * Cell 88 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v088;

    /**
     * Cell 91 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v091;

    /**
     * Cell 94 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v094;

    /**
     * Cell 97 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v097;

    /**
     * Cell 100 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v100;

    /**
     * Cell 103 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v103;

    /**
     * Cell 106 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v106;

    /**
     * Cell 109 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v109;

    /**
     * Cell 112 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v112;

    /**
     * Cell 115 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v115;

    /**
     * Cell 118 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v118;

    /**
     * Cell 121 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v121;

    /**
     * Cell 124 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v124;

    /**
     * Cell 127 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v127;

    /**
     * Cell 130 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v130;

    /**
     * Cell 133 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v133;

    /**
     * Cell 136 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v136;

    /**
     * Cell 139 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v139;

    /**
     * Cell 142 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v142;

    /**
     * Cell 145 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v145;

    /**
     * Cell 148 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v148;

    /**
     * Cell 151 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v151;

    /**
     * Cell 154 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v154;

    /**
     * Cell 157 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v157;

    /**
     * Cell 160 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v160;

    /**
     * Cell 163 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v163;

    /**
     * Cell 166 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v166;

    /**
     * Cell 169 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v169;

    /**
     * Cell 172 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v172;

    /**
     * Cell 175 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v175;

    /**
     * Cell 178 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v178;

    /**
     * Cell 181 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v181;

    /**
     * Cell 184 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v184;

    /**
     * Cell 187 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v187;

    /**
     * Cell 190 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v190;

    /**
     * Cell 193 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v193;

    /**
     * Cell 196 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v196;

    /**
     * Cell 199 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v199;

    /**
     * Cell 202 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v202;

    /**
     * Cell 205 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v205;

    /**
     * Cell 208 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v208;

    /**
     * Cell 211 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v211;

    /**
     * Cell 214 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v214;

    /**
     * Cell 217 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v217;

    /**
     * Cell 220 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v220;

    /**
     * Cell 223 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v223;

    /**
     * Cell 226 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v226;

    /**
     * Cell 229 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v229;

    /**
     * Cell 232 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v232;

    /**
     * Cell 235 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v235;

    /**
     * Cell 238 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v238;

    /**
     * Cell 241 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v241;

    /**
     * Cell 244 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v244;

    /**
     * Cell 247 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v247;

    /**
     * Cell 250 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v250;

    /**
     * Cell 253 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v253;

    /**
     * Cell 2 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v002;

    /**
     * Cell 5 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v005;

    /**
     * Cell 8 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v008;

    /**
     * Cell 11 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v011;

    /**
     * Cell 14 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v014;

    /**
     * Cell 17 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v017;

    /**
     * Cell 20 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v020;

    /**
     * Cell 23 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v023;

    /**
     * Cell 26 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v026;

    /**
     * Cell 29 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v029;

    /**
     * Cell 32 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v032;

    /**
     * Cell 35 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v035;

    /**
     * Cell 38 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v038;

    /**
     * Cell 41 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v041;

    /**
     * Cell 44 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v044;

    /**
     * Cell 47 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v047;

    /**
     * Cell 50 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v050;

    /**
     * Cell 53 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v053;

    /**
     * Cell 56 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v056;

    /**
     * Cell 59 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v059;

    /**
     * Cell 62 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v062;

    /**
     * Cell 65 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v065;

    /**
     * Cell 68 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v068;

    /**
     * Cell 71 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v071;

    /**
     * Cell 74 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v074;

    /**
     * Cell 77 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v077;

    /**
     * Cell 80 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v080;

    /**
     * Cell 83 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v083;

    /**
     * Cell 86 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v086;

    /**
     * Cell 89 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v089;

    /**
     * Cell 92 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v092;

    /**
     * Cell 95 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v095;

    /**
     * Cell 98 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v098;

    /**
     * Cell 101 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v101;

    /**
     * Cell 104 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v104;

    /**
     * Cell 107 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v107;

    /**
     * Cell 110 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v110;

    /**
     * Cell 113 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v113;

    /**
     * Cell 116 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v116;

    /**
     * Cell 119 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v119;

    /**
     * Cell 122 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v122;

    /**
     * Cell 125 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v125;

    /**
     * Cell 128 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v128;

    /**
     * Cell 131 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v131;

    /**
     * Cell 134 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v134;

    /**
     * Cell 137 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v137;

    /**
     * Cell 140 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v140;

    /**
     * Cell 143 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v143;

    /**
     * Cell 146 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v146;

    /**
     * Cell 149 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v149;

    /**
     * Cell 152 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v152;

    /**
     * Cell 155 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v155;

    /**
     * Cell 158 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v158;

    /**
     * Cell 161 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v161;

    /**
     * Cell 164 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v164;

    /**
     * Cell 167 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v167;

    /**
     * Cell 170 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v170;

    /**
     * Cell 173 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v173;

    /**
     * Cell 176 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v176;

    /**
     * Cell 179 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v179;

    /**
     * Cell 182 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v182;

    /**
     * Cell 185 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v185;

    /**
     * Cell 188 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v188;

    /**
     * Cell 191 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v191;

    /**
     * Cell 194 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v194;

    /**
     * Cell 197 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v197;

    /**
     * Cell 200 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v200;

    /**
     * Cell 203 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v203;

    /**
     * Cell 206 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v206;

    /**
     * Cell 209 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v209;

    /**
     * Cell 212 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v212;

    /**
     * Cell 215 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v215;

    /**
     * Cell 218 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v218;

    /**
     * Cell 221 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v221;

    /**
     * Cell 224 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v224;

    /**
     * Cell 227 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v227;

    /**
     * Cell 230 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v230;

    /**
     * Cell 233 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v233;

    /**
     * Cell 236 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v236;

    /**
     * Cell 239 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v239;

    /**
     * Cell 242 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v242;

    /**
     * Cell 245 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v245;

    /**
     * Cell 248 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v248;

    /**
     * Cell 251 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v251;

    /**
     * Cell 254 voltage.
     *
     * Range: 0..4950 (0..4.95 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_v_dbg_v254;
};

/**
 * Signals in message INFO_02_DbgT.
 *
 * Single thermistor temperature (multiplexed). Sent only if enabled within BMS_00_Req.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_info_02_dbg_t_t {
    /**
     * Single thermistor ID.
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_e_dbg_t_id;

    /**
     * Thermistor 0 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t000;

    /**
     * Thermistor 3 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t003;

    /**
     * Thermistor 6 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t006;

    /**
     * Thermistor 9 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t009;

    /**
     * Thermistor 12 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t012;

    /**
     * Thermistor 15 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t015;

    /**
     * Thermistor 18 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t018;

    /**
     * Thermistor 21 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t021;

    /**
     * Thermistor 24 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t024;

    /**
     * Thermistor 27 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t027;

    /**
     * Thermistor 30 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t030;

    /**
     * Thermistor 33 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t033;

    /**
     * Thermistor 36 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t036;

    /**
     * Thermistor 39 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t039;

    /**
     * Thermistor 42 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t042;

    /**
     * Thermistor 45 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t045;

    /**
     * Thermistor 48 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t048;

    /**
     * Thermistor 51 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t051;

    /**
     * Thermistor 54 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t054;

    /**
     * Thermistor 57 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t057;

    /**
     * Thermistor 60 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t060;

    /**
     * Thermistor 63 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t063;

    /**
     * Thermistor 66 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t066;

    /**
     * Thermistor 69 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t069;

    /**
     * Thermistor 72 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t072;

    /**
     * Thermistor 75 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t075;

    /**
     * Thermistor 78 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t078;

    /**
     * Thermistor 81 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t081;

    /**
     * Thermistor 84 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t084;

    /**
     * Thermistor 87 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t087;

    /**
     * Thermistor 90 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t090;

    /**
     * Thermistor 93 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t093;

    /**
     * Thermistor 96 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t096;

    /**
     * Thermistor 99 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t099;

    /**
     * Thermistor 102 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t102;

    /**
     * Thermistor 105 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t105;

    /**
     * Thermistor 108 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t108;

    /**
     * Thermistor 111 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t111;

    /**
     * Thermistor 114 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t114;

    /**
     * Thermistor 117 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t117;

    /**
     * Thermistor 120 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t120;

    /**
     * Thermistor 123 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t123;

    /**
     * Thermistor 126 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t126;

    /**
     * Thermistor 1 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t001;

    /**
     * Thermistor 4 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t004;

    /**
     * Thermistor 7 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t007;

    /**
     * Thermistor 10 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t010;

    /**
     * Thermistor 13 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t013;

    /**
     * Thermistor 16 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t016;

    /**
     * Thermistor 19 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t019;

    /**
     * Thermistor 22 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t022;

    /**
     * Thermistor 25 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t025;

    /**
     * Thermistor 28 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t028;

    /**
     * Thermistor 31 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t031;

    /**
     * Thermistor 34 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t034;

    /**
     * Thermistor 37 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t037;

    /**
     * Thermistor 40 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t040;

    /**
     * Thermistor 43 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t043;

    /**
     * Thermistor 46 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t046;

    /**
     * Thermistor 49 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t049;

    /**
     * Thermistor 52 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t052;

    /**
     * Thermistor 55 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t055;

    /**
     * Thermistor 58 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t058;

    /**
     * Thermistor 61 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t061;

    /**
     * Thermistor 64 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t064;

    /**
     * Thermistor 67 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t067;

    /**
     * Thermistor 70 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t070;

    /**
     * Thermistor 73 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t073;

    /**
     * Thermistor 76 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t076;

    /**
     * Thermistor 79 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t079;

    /**
     * Thermistor 82 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t082;

    /**
     * Thermistor 85 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t085;

    /**
     * Thermistor 88 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t088;

    /**
     * Thermistor 91 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t091;

    /**
     * Thermistor 94 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t094;

    /**
     * Thermistor 97 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t097;

    /**
     * Thermistor 100 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t100;

    /**
     * Thermistor 103 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t103;

    /**
     * Thermistor 106 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t106;

    /**
     * Thermistor 109 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t109;

    /**
     * Thermistor 112 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t112;

    /**
     * Thermistor 115 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t115;

    /**
     * Thermistor 118 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t118;

    /**
     * Thermistor 121 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t121;

    /**
     * Thermistor 124 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t124;

    /**
     * Thermistor 127 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t127;

    /**
     * Thermistor 2 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t002;

    /**
     * Thermistor 5 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t005;

    /**
     * Thermistor 8 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t008;

    /**
     * Thermistor 11 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t011;

    /**
     * Thermistor 14 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t014;

    /**
     * Thermistor 17 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t017;

    /**
     * Thermistor 20 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t020;

    /**
     * Thermistor 23 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t023;

    /**
     * Thermistor 26 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t026;

    /**
     * Thermistor 29 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t029;

    /**
     * Thermistor 32 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t032;

    /**
     * Thermistor 35 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t035;

    /**
     * Thermistor 38 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t038;

    /**
     * Thermistor 41 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t041;

    /**
     * Thermistor 44 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t044;

    /**
     * Thermistor 47 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t047;

    /**
     * Thermistor 50 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t050;

    /**
     * Thermistor 53 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t053;

    /**
     * Thermistor 56 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t056;

    /**
     * Thermistor 59 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t059;

    /**
     * Thermistor 62 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t062;

    /**
     * Thermistor 65 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t065;

    /**
     * Thermistor 68 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t068;

    /**
     * Thermistor 71 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t071;

    /**
     * Thermistor 74 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t074;

    /**
     * Thermistor 77 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t077;

    /**
     * Thermistor 80 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t080;

    /**
     * Thermistor 83 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t083;

    /**
     * Thermistor 86 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t086;

    /**
     * Thermistor 89 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t089;

    /**
     * Thermistor 92 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t092;

    /**
     * Thermistor 95 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t095;

    /**
     * Thermistor 98 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t098;

    /**
     * Thermistor 101 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t101;

    /**
     * Thermistor 104 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t104;

    /**
     * Thermistor 107 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t107;

    /**
     * Thermistor 110 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t110;

    /**
     * Thermistor 113 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t113;

    /**
     * Thermistor 116 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t116;

    /**
     * Thermistor 119 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t119;

    /**
     * Thermistor 122 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t122;

    /**
     * Thermistor 125 temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t bms_t_dbg_t125;
};

/**
 * Signals in message HVB_TX_VCUCmd.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_tx_vcu_cmd_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_clr_err;

    /**
     * requested closing Inverter conductors  by VCU
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_b_hvb_inv_req;

    /**
     * Enables pack all V & T message.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_b_all_vt_req;

    /**
     * Enables pack balancing.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_b_bal_req;
};

/**
 * Signals in message HVB_RX_Diagnosis.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_diagnosis_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_uart;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_can;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_ram;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_eeprom;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_flash;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_bat_vlt_sna;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_inv_vlt_sna;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_bat_curr_sna;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_vcu_can_sna;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_cell_sna;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_imd_low_r;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_imd_sna;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_bat_uv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_cell_ov;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_cell_uv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_cell_ot;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_cell_ut;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_inv_vlt_ov;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_diag_bat_curr_oc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_recovery_active;
};

/**
 * Signals in message HVB_RX_CurrentLimits.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_current_limits_t {
    /**
     * Maximum potential charging power limit. even in case of a protection this values is shown what might possible if no protection is on
     *
     * Range: 0..65535 (0..1310.7 mA)
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t hvb_charge_cur_limits;

    /**
     * Maximum discharging power limit. even in case of a protection this values is shown what might possible if no protection is on
     *
     * Range: 0..65535 (0..1310.7 mA)
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t hvb_discharge_cur_limits;

    /**
     * instantaneous net power (+ for input, - for output)
     *
     * Range: -32768..32767 (-1310.72..1310.68 kW)
     * Scale: 0.04
     * Offset: 0
     */
    int16_t hvb_pwr_hvb;
};

/**
 * Signals in message HVB_RX_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_status_t {
    /**
     * present system main state (State Machine)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_st_sys;

    /**
     * present state for Inverter
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_st_inv;
};

/**
 * Signals in message HVB_RX_Measure.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_measure_t {
    /**
     * Pack Current. Negative is discharging and positive is charging pack. Source is the current sensor.
     *
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t hvb_i_hvb;

    /**
     * Battery Pack Voltage. Source is the sum of all cell voltages.
     *
     * Range: 0..65535 (0..1310.7 V)
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t hvb_u_hvb;

    /**
     * Battery Pack Voltage. Source is the sum of all cell voltages.
     *
     * Range: 0..65535 (0..1310.7 V)
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t hvb_u_bus;
};

/**
 * Signals in message HVB_RX_Actuator.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_actuator_t {
    /**
     * Inverter bus positive contactor status
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_b_inv_cnta_pos_st;

    /**
     * Inverter bus psoitive contactor command.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_b_inv_cnta_pos_cmd;

    /**
     * Inverter bus positive contactor status
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_b_inv_cnta_pre_st;

    /**
     * Inverter bus negative contactor command.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_b_inv_cnta_pre_cmd;

    /**
     * Inverter bus negative contactor status
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_b_inv_cnta_neg_st;

    /**
     * Inverter bus negative contactor command.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_b_inv_cnta_neg_cmd;

    /**
     * Rolling Counter; Generated by BMS and sent to VCU
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_no_cnt_roll_vcu;

    /**
     * SAE J1850 CRC8 (poly: 0x1D, initial value: 0xFF, final XOR: 0xFF) calculated using the previous message bytes.
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_no_crc8_req_msg_vcu;
};

/**
 * Signals in message HVB_RX_VCell.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_v_cell_t {
    /**
     * Highest cell voltage
     *
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t hvb_u_cell_max;

    /**
     * Average cell voltage.
     *
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t hvb_u_cell_mean;

    /**
     * Lowest cell voltage.
     *
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t hvb_u_cell_min;

    /**
     * Cell ID reporting the highest voltage
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_idx_cell_u_max;

    /**
     * Cell ID reporting the lowest voltage
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_idx_cell_u_min;
};

/**
 * Signals in message HVB_RX_SOC.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_soc_t {
    /**
     * Estimated state of charge based on the cell array with the highest OCV
     *
     * Range: -2048..2047 (-31.92..131.88 %)
     * Scale: 0.04
     * Offset: 50
     */
    int32_t hvb_r_so_c_hvb_u_cell_max;

    /**
     * Estimated state of charge based on the cell array with the lowest OCV
     *
     * Range: -2048..2047 (-31.92..131.88 %)
     * Scale: 0.04
     * Offset: 50
     */
    int32_t hvb_r_so_c_hvb_u_cell_min;
};

/**
 * Signals in message HVB_RX_TCell.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_t_cell_t {
    /**
     * Highest cell temperature
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t hvb_t_cell_max;

    /**
     * Average temperature of the cell bodies.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t hvb_t_cell_mean;

    /**
     * Lowest measured cell body temperature.
     *
     * Range: 23315..37815 (-40..105 degC)
     * Scale: 0.01
     * Offset: -273.15
     */
    uint16_t hvb_t_cell_min;
};

/**
 * Signals in message HVB_RX_Insulation.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_insulation_t {
    /**
     * present system main state (State Machine)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvb_st_res_isol;

    /**
     * Battery IMD insulation resistance measure.
     *
     * Range: 0..65535 (0..655350 kOhm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t hvb_res_isol;
};

/**
 * Signals in message HVB_RX_SWVersion.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_hvb_rx_sw_version_t {
    /**
     * Software version hash.
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t hvb_no_sw_vers0;

    /**
     * Software version hash.
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t hvb_no_sw_vers1;
};

/**
 * Signals in message IVTMain_Msg_Cmd.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_cmd_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message IVTMain_Msg_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_response_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message IVTMain_Msg_Result_I.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_result_i_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_id_result_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_i_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_i_meas_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_i_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_i_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_msg_count_result_i;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mA)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_main_result_i;
};

/**
 * Signals in message IVTMain_Msg_Result_U1.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_result_u1_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_id_result_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u1_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u1_meas_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u1_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u1_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_msg_count_result_u1;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_main_result_u1;
};

/**
 * Signals in message IVTMain_Msg_Result_U2.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_result_u2_t {
    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_id_result_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u2_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u2_meas_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u2_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u2_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_msg_count_result_u2;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_main_result_u2;
};

/**
 * Signals in message IVTMain_Msg_Result_U3.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_result_u3_t {
    /**
     * Range: 3..3 (3..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_id_result_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u3_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u3_meas_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u3_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_u3_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_msg_count_result_u3;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_main_result_u3;
};

/**
 * Signals in message IVTMain_Msg_Result_T.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_result_t_t {
    /**
     * Range: 4..4 (4..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_id_result_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_t_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_t_meas_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_t_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_t_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_msg_count_result_t;

    /**
     * Range: -21474836480..21474836470 (-2147483648..2147483647 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int32_t ivt_main_result_t;
};

/**
 * Signals in message IVTMain_Msg_Result_W.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_result_w_t {
    /**
     * Range: 5..5 (5..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_id_result_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_w_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_w_meas_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_w_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_w_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_msg_count_result_w;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 W)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_main_result_w;
};

/**
 * Signals in message IVTMain_Msg_Result_As.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_result_as_t {
    /**
     * Range: 6..6 (6..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_id_result_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_as_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_as_meas_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_as_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_as_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_msg_count_result_as;

    /**
     * Range: -21474836478..2147483647 (-21474836478..2147483647 As)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_main_result_as;
};

/**
 * Signals in message IVTMain_Msg_Result_Wh.
 *
 * All signal values are as on the CAN bus.
 */
struct hvcb_ivt_main_msg_result_wh_t {
    /**
     * Range: 7..7 (7..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_id_result_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_wh_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_wh_meas_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_wh_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_result_wh_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_main_msg_count_result_wh;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 Wh)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_main_result_wh;
};

/**
 * Pack message INFO_01_DbgV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_info_01_dbg_v_pack(
    uint8_t *dst_p,
    const struct hvcb_info_01_dbg_v_t *src_p,
    size_t size);

/**
 * Unpack message INFO_01_DbgV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_info_01_dbg_v_unpack(
    struct hvcb_info_01_dbg_v_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from INFO_01_DbgV.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_info_01_dbg_v_init(struct hvcb_info_01_dbg_v_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_e_dbg_v_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_e_dbg_v_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_e_dbg_v_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v000_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v000_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v000_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v003_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v003_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v003_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v006_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v006_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v006_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v009_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v009_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v009_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v012_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v012_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v012_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v015_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v015_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v015_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v018_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v018_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v018_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v021_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v021_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v021_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v024_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v024_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v024_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v027_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v027_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v027_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v030_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v030_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v030_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v033_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v033_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v033_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v036_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v036_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v036_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v039_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v039_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v039_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v042_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v042_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v042_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v045_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v045_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v045_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v048_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v048_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v048_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v051_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v051_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v051_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v054_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v054_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v054_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v057_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v057_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v057_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v060_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v060_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v060_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v063_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v063_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v063_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v066_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v066_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v066_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v069_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v069_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v069_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v072_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v072_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v072_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v075_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v075_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v075_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v078_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v078_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v078_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v081_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v081_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v081_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v084_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v084_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v084_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v087_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v087_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v087_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v090_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v090_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v090_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v093_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v093_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v093_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v096_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v096_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v096_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v099_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v099_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v099_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v102_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v102_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v102_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v105_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v105_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v105_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v108_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v108_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v111_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v111_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v111_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v114_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v114_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v114_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v117_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v117_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v117_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v120_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v120_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v120_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v123_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v123_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v123_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v126_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v126_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v129_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v129_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v132_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v132_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v135_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v135_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v135_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v138_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v138_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v138_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v141_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v141_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v141_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v144_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v144_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v144_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v147_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v147_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v147_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v150_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v150_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v150_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v153_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v153_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v153_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v156_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v156_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v156_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v159_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v159_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v159_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v162_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v162_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v162_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v165_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v165_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v165_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v168_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v168_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v168_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v171_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v171_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v171_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v174_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v174_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v174_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v177_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v177_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v177_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v180_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v180_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v180_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v183_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v183_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v183_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v186_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v186_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v189_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v189_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v189_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v192_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v192_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v192_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v195_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v195_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v195_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v198_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v198_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v198_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v201_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v201_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v201_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v204_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v204_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v204_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v207_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v207_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v207_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v210_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v210_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v210_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v213_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v213_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v213_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v216_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v216_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v216_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v219_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v219_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v219_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v222_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v222_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v222_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v225_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v225_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v225_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v228_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v228_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v231_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v231_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v231_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v234_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v234_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v234_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v237_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v237_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v237_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v240_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v240_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v240_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v243_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v243_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v243_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v246_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v246_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v246_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v249_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v249_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v249_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v252_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v252_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v252_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v255_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v255_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v255_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v001_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v001_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v001_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v004_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v004_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v004_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v007_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v007_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v007_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v010_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v010_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v010_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v013_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v013_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v013_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v016_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v016_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v016_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v019_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v019_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v019_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v022_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v022_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v022_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v025_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v025_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v025_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v028_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v028_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v028_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v031_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v031_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v031_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v034_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v034_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v034_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v037_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v037_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v037_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v040_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v040_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v040_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v043_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v043_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v043_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v046_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v046_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v046_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v049_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v049_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v049_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v052_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v052_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v052_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v055_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v055_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v055_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v058_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v058_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v058_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v061_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v061_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v061_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v064_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v064_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v064_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v067_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v067_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v067_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v070_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v070_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v070_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v073_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v073_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v073_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v076_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v076_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v076_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v079_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v079_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v079_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v082_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v082_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v082_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v085_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v085_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v085_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v088_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v088_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v088_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v091_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v091_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v091_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v094_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v094_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v094_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v097_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v097_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v097_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v100_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v100_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v100_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v103_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v103_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v103_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v106_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v106_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v106_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v109_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v109_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v109_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v112_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v112_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v112_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v115_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v115_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v115_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v118_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v118_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v121_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v121_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v121_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v124_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v124_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v124_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v127_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v127_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v127_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v130_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v130_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v130_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v133_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v133_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v133_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v136_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v136_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v136_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v139_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v139_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v139_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v142_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v142_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v142_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v145_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v145_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v145_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v148_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v148_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v148_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v151_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v151_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v151_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v154_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v154_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v154_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v157_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v157_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v157_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v160_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v160_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v160_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v163_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v163_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v163_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v166_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v166_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v166_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v169_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v169_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v169_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v172_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v172_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v172_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v175_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v178_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v178_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v178_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v181_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v181_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v181_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v184_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v184_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v184_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v187_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v187_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v187_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v190_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v190_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v190_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v193_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v193_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v193_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v196_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v196_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v196_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v199_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v199_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v199_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v202_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v202_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v202_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v205_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v205_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v205_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v208_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v208_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v208_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v211_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v211_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v211_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v214_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v214_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v217_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v217_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v220_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v220_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v220_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v223_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v223_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v223_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v226_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v226_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v226_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v229_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v229_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v229_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v232_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v232_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v232_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v235_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v235_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v235_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v238_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v238_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v238_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v241_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v241_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v241_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v244_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v247_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v247_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v247_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v250_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v250_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v250_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v253_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v253_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v253_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v002_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v002_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v002_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v005_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v005_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v005_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v008_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v008_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v008_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v011_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v011_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v011_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v014_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v014_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v014_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v017_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v017_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v017_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v020_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v020_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v020_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v023_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v023_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v023_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v026_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v026_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v026_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v029_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v029_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v029_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v032_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v032_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v032_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v035_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v035_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v035_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v038_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v038_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v038_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v041_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v041_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v041_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v044_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v044_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v044_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v047_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v047_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v047_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v050_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v050_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v050_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v053_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v053_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v053_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v056_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v056_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v056_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v059_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v059_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v059_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v062_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v062_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v062_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v065_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v065_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v065_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v068_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v068_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v068_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v071_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v071_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v071_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v074_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v074_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v074_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v077_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v077_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v077_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v080_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v080_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v080_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v083_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v083_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v083_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v086_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v086_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v086_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v089_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v089_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v089_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v092_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v092_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v092_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v095_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v095_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v095_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v098_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v098_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v098_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v101_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v101_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v101_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v104_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v104_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v104_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v107_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v107_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v107_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v110_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v110_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v110_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v113_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v113_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v113_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v116_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v116_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v116_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v119_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v119_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v119_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v122_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v122_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v122_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v125_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v125_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v125_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v128_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v128_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v128_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v131_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v131_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v131_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v134_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v134_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v134_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v137_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v137_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v137_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v140_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v140_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v140_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v143_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v143_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v143_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v146_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v146_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v146_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v149_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v149_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v149_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v152_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v152_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v152_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v155_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v155_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v158_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v158_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v158_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v161_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v161_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v161_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v164_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v164_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v164_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v167_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v167_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v167_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v170_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v170_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v170_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v173_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v173_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v173_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v176_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v176_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v176_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v179_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v179_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v179_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v182_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v182_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v182_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v185_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v185_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v185_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v188_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v188_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v188_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v191_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v191_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v191_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v194_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v194_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v194_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v197_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v197_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v197_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v200_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v200_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v200_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v203_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v203_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v203_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v206_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v206_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v206_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v209_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v209_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v209_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v212_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v212_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v215_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v215_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v215_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v218_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v218_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v218_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v221_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v221_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v221_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v224_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v224_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v227_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v227_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v227_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v230_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v230_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v230_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v233_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v233_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v233_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v236_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v236_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v236_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v239_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v239_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v239_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v242_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v242_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v242_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v245_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v245_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v245_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v248_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v248_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v248_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v251_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v251_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v251_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_01_dbg_v_bms_v_dbg_v254_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_01_dbg_v_bms_v_dbg_v254_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_01_dbg_v_bms_v_dbg_v254_is_in_range(uint16_t value);

/**
 * Pack message INFO_02_DbgT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_info_02_dbg_t_pack(
    uint8_t *dst_p,
    const struct hvcb_info_02_dbg_t_t *src_p,
    size_t size);

/**
 * Unpack message INFO_02_DbgT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_info_02_dbg_t_unpack(
    struct hvcb_info_02_dbg_t_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from INFO_02_DbgT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_info_02_dbg_t_init(struct hvcb_info_02_dbg_t_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_e_dbg_t_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_e_dbg_t_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_e_dbg_t_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t000_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t000_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t000_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t003_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t003_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t003_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t006_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t006_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t006_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t009_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t009_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t009_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t012_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t012_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t012_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t015_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t015_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t015_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t018_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t018_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t018_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t021_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t021_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t021_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t024_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t024_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t024_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t027_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t027_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t027_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t030_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t030_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t030_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t033_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t033_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t033_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t036_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t036_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t036_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t039_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t039_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t039_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t042_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t042_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t042_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t045_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t045_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t045_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t048_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t048_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t048_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t051_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t051_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t051_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t054_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t054_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t054_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t057_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t057_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t057_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t060_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t060_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t060_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t063_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t063_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t063_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t066_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t066_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t066_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t069_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t069_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t069_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t072_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t072_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t072_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t075_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t075_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t075_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t078_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t078_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t078_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t081_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t081_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t081_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t084_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t084_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t084_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t087_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t087_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t087_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t090_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t090_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t090_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t093_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t093_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t093_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t096_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t096_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t096_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t099_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t099_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t099_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t102_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t102_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t102_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t105_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t105_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t105_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t108_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t108_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t111_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t111_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t111_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t114_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t114_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t114_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t117_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t117_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t117_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t120_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t120_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t120_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t123_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t123_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t123_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t126_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t126_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t001_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t001_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t001_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t004_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t004_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t004_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t007_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t007_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t007_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t010_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t010_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t010_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t013_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t013_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t013_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t016_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t016_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t016_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t019_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t019_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t019_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t022_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t022_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t022_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t025_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t025_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t025_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t028_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t028_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t028_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t031_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t031_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t031_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t034_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t034_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t034_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t037_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t037_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t037_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t040_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t040_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t040_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t043_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t043_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t043_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t046_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t046_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t046_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t049_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t049_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t049_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t052_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t052_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t052_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t055_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t055_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t055_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t058_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t058_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t058_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t061_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t061_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t061_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t064_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t064_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t064_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t067_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t067_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t067_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t070_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t070_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t070_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t073_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t073_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t073_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t076_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t076_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t076_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t079_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t079_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t079_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t082_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t082_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t082_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t085_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t085_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t085_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t088_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t088_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t088_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t091_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t091_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t091_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t094_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t094_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t094_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t097_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t097_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t097_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t100_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t100_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t100_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t103_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t103_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t103_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t106_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t106_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t106_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t109_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t109_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t109_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t112_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t112_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t112_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t115_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t115_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t115_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t118_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t118_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t121_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t121_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t121_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t124_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t124_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t124_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t127_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t127_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t127_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t002_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t002_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t002_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t005_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t005_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t005_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t008_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t008_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t008_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t011_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t011_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t011_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t014_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t014_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t014_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t017_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t017_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t017_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t020_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t020_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t020_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t023_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t023_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t023_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t026_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t026_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t026_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t029_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t029_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t029_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t032_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t032_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t032_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t035_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t035_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t035_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t038_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t038_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t038_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t041_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t041_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t041_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t044_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t044_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t044_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t047_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t047_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t047_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t050_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t050_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t050_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t053_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t053_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t053_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t056_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t056_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t056_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t059_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t059_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t059_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t062_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t062_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t062_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t065_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t065_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t065_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t068_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t068_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t068_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t071_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t071_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t071_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t074_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t074_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t074_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t077_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t077_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t077_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t080_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t080_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t080_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t083_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t083_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t083_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t086_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t086_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t086_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t089_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t089_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t089_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t092_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t092_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t092_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t095_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t095_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t095_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t098_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t098_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t098_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t101_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t101_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t101_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t104_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t104_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t104_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t107_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t107_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t107_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t110_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t110_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t110_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t113_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t113_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t113_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t116_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t116_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t116_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t119_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t119_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t119_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t122_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t122_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t122_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_info_02_dbg_t_bms_t_dbg_t125_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_info_02_dbg_t_bms_t_dbg_t125_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_info_02_dbg_t_bms_t_dbg_t125_is_in_range(uint16_t value);

/**
 * Pack message HVB_TX_VCUCmd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_tx_vcu_cmd_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_tx_vcu_cmd_t *src_p,
    size_t size);

/**
 * Unpack message HVB_TX_VCUCmd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_tx_vcu_cmd_unpack(
    struct hvcb_hvb_tx_vcu_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_TX_VCUCmd.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_tx_vcu_cmd_init(struct hvcb_hvb_tx_vcu_cmd_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_tx_vcu_cmd_vcu_clr_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_tx_vcu_cmd_vcu_clr_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_tx_vcu_cmd_vcu_clr_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_tx_vcu_cmd_vcu_b_hvb_inv_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_tx_vcu_cmd_vcu_b_hvb_inv_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_tx_vcu_cmd_vcu_b_hvb_inv_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_tx_vcu_cmd_vcu_b_all_vt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_tx_vcu_cmd_vcu_b_all_vt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_tx_vcu_cmd_vcu_b_all_vt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_tx_vcu_cmd_vcu_b_bal_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_tx_vcu_cmd_vcu_b_bal_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_tx_vcu_cmd_vcu_b_bal_req_is_in_range(uint8_t value);

/**
 * Pack message HVB_RX_Diagnosis.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_diagnosis_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_diagnosis_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_Diagnosis.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_diagnosis_unpack(
    struct hvcb_hvb_rx_diagnosis_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_Diagnosis.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_diagnosis_init(struct hvcb_hvb_rx_diagnosis_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_uart_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_uart_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_uart_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_can_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_can_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_can_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_ram_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_ram_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_ram_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_eeprom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_eeprom_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_eeprom_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_flash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_flash_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_flash_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_bat_vlt_sna_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_bat_vlt_sna_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_bat_vlt_sna_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_inv_vlt_sna_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_inv_vlt_sna_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_inv_vlt_sna_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_bat_curr_sna_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_bat_curr_sna_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_bat_curr_sna_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_vcu_can_sna_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_vcu_can_sna_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_vcu_can_sna_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_cell_sna_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_cell_sna_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_cell_sna_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_imd_low_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_imd_low_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_imd_low_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_imd_sna_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_imd_sna_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_imd_sna_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_bat_uv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_bat_uv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_bat_uv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_cell_ov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_cell_ov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_cell_ov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_cell_uv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_cell_uv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_cell_uv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_cell_ot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_cell_ot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_cell_ot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_cell_ut_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_cell_ut_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_cell_ut_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_inv_vlt_ov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_inv_vlt_ov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_inv_vlt_ov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_diag_bat_curr_oc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_diag_bat_curr_oc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_diag_bat_curr_oc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_diagnosis_hvb_recovery_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_diagnosis_hvb_recovery_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_diagnosis_hvb_recovery_active_is_in_range(uint8_t value);

/**
 * Pack message HVB_RX_CurrentLimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_current_limits_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_current_limits_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_CurrentLimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_current_limits_unpack(
    struct hvcb_hvb_rx_current_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_CurrentLimits.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_current_limits_init(struct hvcb_hvb_rx_current_limits_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_current_limits_hvb_charge_cur_limits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_current_limits_hvb_charge_cur_limits_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_current_limits_hvb_charge_cur_limits_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_current_limits_hvb_discharge_cur_limits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_current_limits_hvb_discharge_cur_limits_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_current_limits_hvb_discharge_cur_limits_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t hvcb_hvb_rx_current_limits_hvb_pwr_hvb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_current_limits_hvb_pwr_hvb_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_current_limits_hvb_pwr_hvb_is_in_range(int16_t value);

/**
 * Pack message HVB_RX_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_status_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_status_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_status_unpack(
    struct hvcb_hvb_rx_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_status_init(struct hvcb_hvb_rx_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_status_hvb_st_sys_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_status_hvb_st_sys_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_status_hvb_st_sys_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_status_hvb_st_inv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_status_hvb_st_inv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_status_hvb_st_inv_is_in_range(uint8_t value);

/**
 * Pack message HVB_RX_Measure.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_measure_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_measure_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_Measure.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_measure_unpack(
    struct hvcb_hvb_rx_measure_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_Measure.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_measure_init(struct hvcb_hvb_rx_measure_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t hvcb_hvb_rx_measure_hvb_i_hvb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_measure_hvb_i_hvb_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_measure_hvb_i_hvb_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_measure_hvb_u_hvb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_measure_hvb_u_hvb_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_measure_hvb_u_hvb_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_measure_hvb_u_bus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_measure_hvb_u_bus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_measure_hvb_u_bus_is_in_range(uint16_t value);

/**
 * Pack message HVB_RX_Actuator.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_actuator_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_actuator_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_Actuator.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_actuator_unpack(
    struct hvcb_hvb_rx_actuator_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_Actuator.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_actuator_init(struct hvcb_hvb_rx_actuator_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pos_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pos_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pos_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pos_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pos_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pos_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pre_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pre_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pre_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pre_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pre_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_actuator_hvb_b_inv_cnta_pre_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_actuator_hvb_b_inv_cnta_neg_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_actuator_hvb_b_inv_cnta_neg_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_actuator_hvb_b_inv_cnta_neg_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_actuator_hvb_b_inv_cnta_neg_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_actuator_hvb_b_inv_cnta_neg_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_actuator_hvb_b_inv_cnta_neg_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_actuator_hvb_no_cnt_roll_vcu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_actuator_hvb_no_cnt_roll_vcu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_actuator_hvb_no_cnt_roll_vcu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_actuator_hvb_no_crc8_req_msg_vcu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_actuator_hvb_no_crc8_req_msg_vcu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_actuator_hvb_no_crc8_req_msg_vcu_is_in_range(uint8_t value);

/**
 * Pack message HVB_RX_VCell.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_v_cell_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_v_cell_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_VCell.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_v_cell_unpack(
    struct hvcb_hvb_rx_v_cell_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_VCell.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_v_cell_init(struct hvcb_hvb_rx_v_cell_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_v_cell_hvb_u_cell_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_v_cell_hvb_u_cell_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_v_cell_hvb_u_cell_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_v_cell_hvb_u_cell_mean_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_v_cell_hvb_u_cell_mean_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_v_cell_hvb_u_cell_mean_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_v_cell_hvb_u_cell_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_v_cell_hvb_u_cell_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_v_cell_hvb_u_cell_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_v_cell_hvb_idx_cell_u_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_v_cell_hvb_idx_cell_u_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_v_cell_hvb_idx_cell_u_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_v_cell_hvb_idx_cell_u_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_v_cell_hvb_idx_cell_u_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_v_cell_hvb_idx_cell_u_min_is_in_range(uint8_t value);

/**
 * Pack message HVB_RX_SOC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_soc_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_soc_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_SOC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_soc_unpack(
    struct hvcb_hvb_rx_soc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_SOC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_soc_init(struct hvcb_hvb_rx_soc_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_hvb_rx_soc_hvb_r_so_c_hvb_u_cell_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_soc_hvb_r_so_c_hvb_u_cell_max_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_soc_hvb_r_so_c_hvb_u_cell_max_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_hvb_rx_soc_hvb_r_so_c_hvb_u_cell_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_soc_hvb_r_so_c_hvb_u_cell_min_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_soc_hvb_r_so_c_hvb_u_cell_min_is_in_range(int32_t value);

/**
 * Pack message HVB_RX_TCell.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_t_cell_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_t_cell_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_TCell.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_t_cell_unpack(
    struct hvcb_hvb_rx_t_cell_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_TCell.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_t_cell_init(struct hvcb_hvb_rx_t_cell_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_t_cell_hvb_t_cell_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_t_cell_hvb_t_cell_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_t_cell_hvb_t_cell_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_t_cell_hvb_t_cell_mean_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_t_cell_hvb_t_cell_mean_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_t_cell_hvb_t_cell_mean_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_t_cell_hvb_t_cell_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_t_cell_hvb_t_cell_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_t_cell_hvb_t_cell_min_is_in_range(uint16_t value);

/**
 * Pack message HVB_RX_Insulation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_insulation_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_insulation_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_Insulation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_insulation_unpack(
    struct hvcb_hvb_rx_insulation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_Insulation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_insulation_init(struct hvcb_hvb_rx_insulation_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_hvb_rx_insulation_hvb_st_res_isol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_insulation_hvb_st_res_isol_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_insulation_hvb_st_res_isol_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hvcb_hvb_rx_insulation_hvb_res_isol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_insulation_hvb_res_isol_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_insulation_hvb_res_isol_is_in_range(uint16_t value);

/**
 * Pack message HVB_RX_SWVersion.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_hvb_rx_sw_version_pack(
    uint8_t *dst_p,
    const struct hvcb_hvb_rx_sw_version_t *src_p,
    size_t size);

/**
 * Unpack message HVB_RX_SWVersion.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_hvb_rx_sw_version_unpack(
    struct hvcb_hvb_rx_sw_version_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HVB_RX_SWVersion.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_hvb_rx_sw_version_init(struct hvcb_hvb_rx_sw_version_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t hvcb_hvb_rx_sw_version_hvb_no_sw_vers0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_sw_version_hvb_no_sw_vers0_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_sw_version_hvb_no_sw_vers0_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t hvcb_hvb_rx_sw_version_hvb_no_sw_vers1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_hvb_rx_sw_version_hvb_no_sw_vers1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_hvb_rx_sw_version_hvb_no_sw_vers1_is_in_range(uint32_t value);

/**
 * Pack message IVTMain_Msg_Cmd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_cmd_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_cmd_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Cmd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_cmd_unpack(
    struct hvcb_ivt_main_msg_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Cmd.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_cmd_init(struct hvcb_ivt_main_msg_cmd_t *msg_p);

/**
 * Pack message IVTMain_Msg_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_response_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_response_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_response_unpack(
    struct hvcb_ivt_main_msg_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Response.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_response_init(struct hvcb_ivt_main_msg_response_t *msg_p);

/**
 * Pack message IVTMain_Msg_Result_I.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_result_i_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_result_i_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Result_I.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_result_i_unpack(
    struct hvcb_ivt_main_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Result_I.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_result_i_init(struct hvcb_ivt_main_msg_result_i_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_i_ivt_main_id_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_i_ivt_main_id_result_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_i_ivt_main_id_result_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_i_ivt_main_result_i_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_i_ivt_main_result_i_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_i_ivt_main_result_i_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_i_ivt_main_result_i_meas_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_i_ivt_main_result_i_meas_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_i_ivt_main_result_i_meas_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_i_ivt_main_result_i_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_i_ivt_main_result_i_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_i_ivt_main_result_i_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_i_ivt_main_result_i_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_i_ivt_main_result_i_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_i_ivt_main_result_i_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_i_ivt_main_msg_count_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_i_ivt_main_msg_count_result_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_i_ivt_main_msg_count_result_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_ivt_main_msg_result_i_ivt_main_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_i_ivt_main_result_i_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_i_ivt_main_result_i_is_in_range(int32_t value);

/**
 * Pack message IVTMain_Msg_Result_U1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_result_u1_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_result_u1_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Result_U1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_result_u1_unpack(
    struct hvcb_ivt_main_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Result_U1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_result_u1_init(struct hvcb_ivt_main_msg_result_u1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u1_ivt_main_id_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u1_ivt_main_id_result_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u1_ivt_main_id_result_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_meas_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_meas_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_meas_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u1_ivt_main_msg_count_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u1_ivt_main_msg_count_result_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u1_ivt_main_msg_count_result_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u1_ivt_main_result_u1_is_in_range(int32_t value);

/**
 * Pack message IVTMain_Msg_Result_U2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_result_u2_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_result_u2_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Result_U2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_result_u2_unpack(
    struct hvcb_ivt_main_msg_result_u2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Result_U2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_result_u2_init(struct hvcb_ivt_main_msg_result_u2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u2_ivt_main_id_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u2_ivt_main_id_result_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u2_ivt_main_id_result_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_meas_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_meas_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_meas_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u2_ivt_main_msg_count_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u2_ivt_main_msg_count_result_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u2_ivt_main_msg_count_result_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u2_ivt_main_result_u2_is_in_range(int32_t value);

/**
 * Pack message IVTMain_Msg_Result_U3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_result_u3_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_result_u3_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Result_U3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_result_u3_unpack(
    struct hvcb_ivt_main_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Result_U3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_result_u3_init(struct hvcb_ivt_main_msg_result_u3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u3_ivt_main_id_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u3_ivt_main_id_result_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u3_ivt_main_id_result_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_meas_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_meas_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_meas_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_u3_ivt_main_msg_count_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u3_ivt_main_msg_count_result_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u3_ivt_main_msg_count_result_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_u3_ivt_main_result_u3_is_in_range(int32_t value);

/**
 * Pack message IVTMain_Msg_Result_T.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_result_t_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_result_t_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Result_T.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_result_t_unpack(
    struct hvcb_ivt_main_msg_result_t_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Result_T.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_result_t_init(struct hvcb_ivt_main_msg_result_t_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_t_ivt_main_id_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_t_ivt_main_id_result_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_t_ivt_main_id_result_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_t_ivt_main_result_t_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_t_ivt_main_result_t_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_t_ivt_main_result_t_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_t_ivt_main_result_t_meas_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_t_ivt_main_result_t_meas_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_t_ivt_main_result_t_meas_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_t_ivt_main_result_t_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_t_ivt_main_result_t_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_t_ivt_main_result_t_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_t_ivt_main_result_t_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_t_ivt_main_result_t_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_t_ivt_main_result_t_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_t_ivt_main_msg_count_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_t_ivt_main_msg_count_result_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_t_ivt_main_msg_count_result_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_ivt_main_msg_result_t_ivt_main_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_t_ivt_main_result_t_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_t_ivt_main_result_t_is_in_range(int32_t value);

/**
 * Pack message IVTMain_Msg_Result_W.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_result_w_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_result_w_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Result_W.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_result_w_unpack(
    struct hvcb_ivt_main_msg_result_w_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Result_W.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_result_w_init(struct hvcb_ivt_main_msg_result_w_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_w_ivt_main_id_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_w_ivt_main_id_result_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_w_ivt_main_id_result_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_w_ivt_main_result_w_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_w_ivt_main_result_w_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_w_ivt_main_result_w_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_w_ivt_main_result_w_meas_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_w_ivt_main_result_w_meas_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_w_ivt_main_result_w_meas_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_w_ivt_main_result_w_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_w_ivt_main_result_w_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_w_ivt_main_result_w_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_w_ivt_main_result_w_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_w_ivt_main_result_w_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_w_ivt_main_result_w_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_w_ivt_main_msg_count_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_w_ivt_main_msg_count_result_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_w_ivt_main_msg_count_result_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_ivt_main_msg_result_w_ivt_main_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_w_ivt_main_result_w_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_w_ivt_main_result_w_is_in_range(int32_t value);

/**
 * Pack message IVTMain_Msg_Result_As.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_result_as_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_result_as_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Result_As.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_result_as_unpack(
    struct hvcb_ivt_main_msg_result_as_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Result_As.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_result_as_init(struct hvcb_ivt_main_msg_result_as_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_as_ivt_main_id_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_as_ivt_main_id_result_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_as_ivt_main_id_result_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_as_ivt_main_result_as_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_as_ivt_main_result_as_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_as_ivt_main_result_as_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_as_ivt_main_result_as_meas_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_as_ivt_main_result_as_meas_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_as_ivt_main_result_as_meas_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_as_ivt_main_result_as_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_as_ivt_main_result_as_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_as_ivt_main_result_as_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_as_ivt_main_result_as_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_as_ivt_main_result_as_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_as_ivt_main_result_as_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_as_ivt_main_msg_count_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_as_ivt_main_msg_count_result_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_as_ivt_main_msg_count_result_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_ivt_main_msg_result_as_ivt_main_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_as_ivt_main_result_as_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_as_ivt_main_result_as_is_in_range(int32_t value);

/**
 * Pack message IVTMain_Msg_Result_Wh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hvcb_ivt_main_msg_result_wh_pack(
    uint8_t *dst_p,
    const struct hvcb_ivt_main_msg_result_wh_t *src_p,
    size_t size);

/**
 * Unpack message IVTMain_Msg_Result_Wh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hvcb_ivt_main_msg_result_wh_unpack(
    struct hvcb_ivt_main_msg_result_wh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVTMain_Msg_Result_Wh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int hvcb_ivt_main_msg_result_wh_init(struct hvcb_ivt_main_msg_result_wh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_wh_ivt_main_id_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_wh_ivt_main_id_result_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_wh_ivt_main_id_result_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_meas_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_meas_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_meas_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hvcb_ivt_main_msg_result_wh_ivt_main_msg_count_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_wh_ivt_main_msg_count_result_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_wh_ivt_main_msg_count_result_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hvcb_ivt_main_msg_result_wh_ivt_main_result_wh_is_in_range(int32_t value);


#ifdef __cplusplus
}
#endif

#endif
